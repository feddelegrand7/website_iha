<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | Mohamed El Fodil IHADDADEN</title>
    <link>/post/</link>
      <atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Mon, 11 Nov 2019 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/img/logo-via-logohub.png</url>
      <title>Posts</title>
      <link>/post/</link>
    </image>
    
    <item>
      <title>How to split a dataframe in R?</title>
      <link>/post/how_to_split_a_dataframe/how-to-split-a-dataframe-in-r/</link>
      <pubDate>Mon, 11 Nov 2019 00:00:00 +0000</pubDate>
      <guid>/post/how_to_split_a_dataframe/how-to-split-a-dataframe-in-r/</guid>
      <description>


&lt;p&gt;In this tutorial we’ll work with the &lt;strong&gt;ChickWeight&lt;/strong&gt; data. This database exhibits information on chickens’ weights according to 4 different diets.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(ChickWeight)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   weight Time Chick Diet
## 1     42    0     1    1
## 2     51    2     1    1
## 3     59    4     1    1
## 4     64    6     1    1
## 5     76    8     1    1
## 6     93   10     1    1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Suppose, we want to split our overal dataframe according to each type of diet. There is a simple function called &lt;code&gt;split()&lt;/code&gt; that allows us to do that. &lt;strong&gt;Note that the splitting argument must be a factor object.&lt;/strong&gt; Let’s check this condition.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;class(ChickWeight$Diet)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;factor&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Indeed, the Diet variable is a factor. Now, we split our dataframe :&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;splitted_data &amp;lt;- split(ChickWeight, ChickWeight$Diet)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this context, we can assign a name to each splitted data:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Diet1 &amp;lt;- splitted_data$`1`  # The 1, 2, 3, 4 represent the diet factor levels

Diet2 &amp;lt;- splitted_data$`2`

Diet3 &amp;lt;- splitted_data$`3`

Diet4 &amp;lt;- splitted_data$`4`&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, let’s check our result by printig the first values of Diet 3 and Diet 4:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(Diet3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     weight Time Chick Diet
## 341     42    0    31    3
## 342     53    2    31    3
## 343     62    4    31    3
## 344     73    6    31    3
## 345     85    8    31    3
## 346    102   10    31    3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(Diet4)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     weight Time Chick Diet
## 461     42    0    41    4
## 462     51    2    41    4
## 463     66    4    41    4
## 464     85    6    41    4
## 465    103    8    41    4
## 466    124   10    41    4&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Great, it’s perfectly working.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introduction to the Subset function</title>
      <link>/post/introduction_to_the_subset_function/introduction-to-the-subset-function/</link>
      <pubDate>Mon, 11 Nov 2019 00:00:00 +0000</pubDate>
      <guid>/post/introduction_to_the_subset_function/introduction-to-the-subset-function/</guid>
      <description>


&lt;p&gt;Although I’m a big fan of the tidyverse philosophy of handling and wrangling data, one must admit that there are quit powerful functions in base R. One of theses functions is &lt;code&gt;subset()&lt;/code&gt; which returns a dataframe according to some defined subsetting properties. Let’s dive into one example using the simple &lt;strong&gt;mtcars&lt;/strong&gt; data:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(mtcars)  # A quick look at the mtcars data&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                    mpg cyl disp  hp drat    wt  qsec vs am gear carb
## Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4
## Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4
## Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1
## Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1
## Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2
## Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Suppose, we want to extract all the vehicules that have an &lt;em&gt;mpg&lt;/em&gt; greater than 20:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;subset(mtcars, mpg &amp;gt; 20)  # the first argument is the dataframe&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                 mpg cyl  disp  hp drat    wt  qsec vs am gear carb
## Mazda RX4      21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4
## Mazda RX4 Wag  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4
## Datsun 710     22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1
## Hornet 4 Drive 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1
## Merc 240D      24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2
## Merc 230       22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2
## Fiat 128       32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1
## Honda Civic    30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2
## Toyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1
## Toyota Corona  21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1
## Fiat X1-9      27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1
## Porsche 914-2  26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2
## Lotus Europa   30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2
## Volvo 142E     21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can observe that the &lt;em&gt;subset&lt;/em&gt; function is flexible. We don’t have to specify the column name with the dollar sign (&lt;em&gt;mtcars$mpg&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Let’s take another more complex example. We will extract all vehicules that have an &lt;em&gt;mpg&lt;/em&gt; superior to 30 and a &lt;em&gt;cyl&lt;/em&gt; equal to 4:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;subset(mtcars, mpg &amp;gt; 30 &amp;amp; cyl == 4) # &amp;amp; &amp;lt;=&amp;gt; AND&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                 mpg cyl disp  hp drat    wt  qsec vs am gear carb
## Fiat 128       32.4   4 78.7  66 4.08 2.200 19.47  1  1    4    1
## Honda Civic    30.4   4 75.7  52 4.93 1.615 18.52  1  1    4    2
## Toyota Corolla 33.9   4 71.1  65 4.22 1.835 19.90  1  1    4    1
## Lotus Europa   30.4   4 95.1 113 3.77 1.513 16.90  1  1    5    2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, the &lt;em&gt;subset&lt;/em&gt; function works smoothly with the R logical expressions.&lt;/p&gt;
&lt;p&gt;Finally, there is another important argument that we must see. Suppose, we want to extract a specified column, let’s say that we’re solely interested in the &lt;em&gt;wt&lt;/em&gt; variable. We can extract this column depending using the &lt;code&gt;select&lt;/code&gt; argument:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;subset(mtcars, mpg &amp;gt; 30 &amp;amp; cyl == 4, select = wt)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                   wt
## Fiat 128       2.200
## Honda Civic    1.615
## Toyota Corolla 1.835
## Lotus Europa   1.513&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the same way, we can extract several columns :&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;subset(mtcars, mpg &amp;gt; 30 &amp;amp; cyl == 4, select = c(wt, disp, am))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                   wt disp am
## Fiat 128       2.200 78.7  1
## Honda Civic    1.615 75.7  1
## Toyota Corolla 1.835 71.1  1
## Lotus Europa   1.513 95.1  1&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Three ways to get a summary of your data </title>
      <link>/post/three_warys_to_get_a_summary_of_your_data/three-ways-to-get-a-summary-of-your-data/</link>
      <pubDate>Mon, 11 Nov 2019 00:00:00 +0000</pubDate>
      <guid>/post/three_warys_to_get_a_summary_of_your_data/three-ways-to-get-a-summary-of-your-data/</guid>
      <description>


&lt;div id=&#34;summary&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;To get a first idea about a certain dataframe’s statistical metrics, there is of course the well known &lt;code&gt;summary()&lt;/code&gt; function :&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(mtcars)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       mpg             cyl             disp             hp       
##  Min.   :10.40   Min.   :4.000   Min.   : 71.1   Min.   : 52.0  
##  1st Qu.:15.43   1st Qu.:4.000   1st Qu.:120.8   1st Qu.: 96.5  
##  Median :19.20   Median :6.000   Median :196.3   Median :123.0  
##  Mean   :20.09   Mean   :6.188   Mean   :230.7   Mean   :146.7  
##  3rd Qu.:22.80   3rd Qu.:8.000   3rd Qu.:326.0   3rd Qu.:180.0  
##  Max.   :33.90   Max.   :8.000   Max.   :472.0   Max.   :335.0  
##       drat             wt             qsec             vs        
##  Min.   :2.760   Min.   :1.513   Min.   :14.50   Min.   :0.0000  
##  1st Qu.:3.080   1st Qu.:2.581   1st Qu.:16.89   1st Qu.:0.0000  
##  Median :3.695   Median :3.325   Median :17.71   Median :0.0000  
##  Mean   :3.597   Mean   :3.217   Mean   :17.85   Mean   :0.4375  
##  3rd Qu.:3.920   3rd Qu.:3.610   3rd Qu.:18.90   3rd Qu.:1.0000  
##  Max.   :4.930   Max.   :5.424   Max.   :22.90   Max.   :1.0000  
##        am              gear            carb      
##  Min.   :0.0000   Min.   :3.000   Min.   :1.000  
##  1st Qu.:0.0000   1st Qu.:3.000   1st Qu.:2.000  
##  Median :0.0000   Median :4.000   Median :2.000  
##  Mean   :0.4062   Mean   :3.688   Mean   :2.812  
##  3rd Qu.:1.0000   3rd Qu.:4.000   3rd Qu.:4.000  
##  Max.   :1.0000   Max.   :5.000   Max.   :8.000&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, there are other interesting functions that provide more structured and exhaustive information.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;describe&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;describe&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;psych&lt;/strong&gt; package has a function called &lt;code&gt;describe()&lt;/code&gt; that provides several statistics that are not available within the &lt;code&gt;summary()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(psych)

describe(mtcars)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      vars  n   mean     sd median trimmed    mad   min    max  range  skew
## mpg     1 32  20.09   6.03  19.20   19.70   5.41 10.40  33.90  23.50  0.61
## cyl     2 32   6.19   1.79   6.00    6.23   2.97  4.00   8.00   4.00 -0.17
## disp    3 32 230.72 123.94 196.30  222.52 140.48 71.10 472.00 400.90  0.38
## hp      4 32 146.69  68.56 123.00  141.19  77.10 52.00 335.00 283.00  0.73
## drat    5 32   3.60   0.53   3.70    3.58   0.70  2.76   4.93   2.17  0.27
## wt      6 32   3.22   0.98   3.33    3.15   0.77  1.51   5.42   3.91  0.42
## qsec    7 32  17.85   1.79  17.71   17.83   1.42 14.50  22.90   8.40  0.37
## vs      8 32   0.44   0.50   0.00    0.42   0.00  0.00   1.00   1.00  0.24
## am      9 32   0.41   0.50   0.00    0.38   0.00  0.00   1.00   1.00  0.36
## gear   10 32   3.69   0.74   4.00    3.62   1.48  3.00   5.00   2.00  0.53
## carb   11 32   2.81   1.62   2.00    2.65   1.48  1.00   8.00   7.00  1.05
##      kurtosis    se
## mpg     -0.37  1.07
## cyl     -1.76  0.32
## disp    -1.21 21.91
## hp      -0.14 12.12
## drat    -0.71  0.09
## wt      -0.02  0.17
## qsec     0.34  0.32
## vs      -2.00  0.09
## am      -1.92  0.09
## gear    -1.07  0.13
## carb     1.26  0.29&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can see that there is a star next to the &lt;em&gt;am&lt;/em&gt; variable. This way, the &lt;code&gt;describe()&lt;/code&gt; function is telling us that the &lt;em&gt;am&lt;/em&gt; variable is a factor and it doesn’t make sense to measure for example its mean or its standard deviation.&lt;/p&gt;
&lt;p&gt;In this context, there is an argument that allows us to omit non-numeric variables.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;describe(mtcars, omit = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      vars  n   mean     sd median trimmed    mad   min    max  range  skew
## mpg     1 32  20.09   6.03  19.20   19.70   5.41 10.40  33.90  23.50  0.61
## cyl     2 32   6.19   1.79   6.00    6.23   2.97  4.00   8.00   4.00 -0.17
## disp    3 32 230.72 123.94 196.30  222.52 140.48 71.10 472.00 400.90  0.38
## hp      4 32 146.69  68.56 123.00  141.19  77.10 52.00 335.00 283.00  0.73
## drat    5 32   3.60   0.53   3.70    3.58   0.70  2.76   4.93   2.17  0.27
## wt      6 32   3.22   0.98   3.33    3.15   0.77  1.51   5.42   3.91  0.42
## qsec    7 32  17.85   1.79  17.71   17.83   1.42 14.50  22.90   8.40  0.37
## vs      8 32   0.44   0.50   0.00    0.42   0.00  0.00   1.00   1.00  0.24
## am      9 32   0.41   0.50   0.00    0.38   0.00  0.00   1.00   1.00  0.36
## gear   10 32   3.69   0.74   4.00    3.62   1.48  3.00   5.00   2.00  0.53
## carb   11 32   2.81   1.62   2.00    2.65   1.48  1.00   8.00   7.00  1.05
##      kurtosis    se
## mpg     -0.37  1.07
## cyl     -1.76  0.32
## disp    -1.21 21.91
## hp      -0.14 12.12
## drat    -0.71  0.09
## wt      -0.02  0.17
## qsec     0.34  0.32
## vs      -2.00  0.09
## am      -1.92  0.09
## gear    -1.07  0.13
## carb     1.26  0.29&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;skim&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;skim&lt;/h2&gt;
&lt;p&gt;Finally, we present the &lt;code&gt;skim()&lt;/code&gt; function from the &lt;strong&gt;skimr&lt;/strong&gt; package which provides some statistics and a tiny nice histogram for the numerical variables (the histograms cannot be rendered in the website, but just try it out) !!!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(skimr)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Attachement du package : &amp;#39;skimr&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following object is masked from &amp;#39;package:stats&amp;#39;:
## 
##     filter&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;skim(mtcars)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Skim summary statistics
##  n obs: 32 
##  n variables: 11 
## 
## -- Variable type:numeric --------------------------
##  variable missing complete  n   mean     sd    p0    p25    p50    p75
##        am       0       32 32   0.41   0.5   0      0      0      1   
##      carb       0       32 32   2.81   1.62  1      2      2      4   
##       cyl       0       32 32   6.19   1.79  4      4      6      8   
##      disp       0       32 32 230.72 123.94 71.1  120.83 196.3  326   
##      drat       0       32 32   3.6    0.53  2.76   3.08   3.7    3.92
##      gear       0       32 32   3.69   0.74  3      3      4      4   
##        hp       0       32 32 146.69  68.56 52     96.5  123    180   
##       mpg       0       32 32  20.09   6.03 10.4   15.43  19.2   22.8 
##      qsec       0       32 32  17.85   1.79 14.5   16.89  17.71  18.9 
##        vs       0       32 32   0.44   0.5   0      0      0      1   
##        wt       0       32 32   3.22   0.98  1.51   2.58   3.33   3.61
##    p100     hist
##    1    &amp;lt;U+2587&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2586&amp;gt;
##    8    &amp;lt;U+2586&amp;gt;&amp;lt;U+2587&amp;gt;&amp;lt;U+2582&amp;gt;&amp;lt;U+2587&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;
##    8    &amp;lt;U+2586&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2583&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2587&amp;gt;
##  472    &amp;lt;U+2587&amp;gt;&amp;lt;U+2586&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2582&amp;gt;&amp;lt;U+2585&amp;gt;&amp;lt;U+2583&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2582&amp;gt;
##    4.93 &amp;lt;U+2583&amp;gt;&amp;lt;U+2587&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2585&amp;gt;&amp;lt;U+2587&amp;gt;&amp;lt;U+2582&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;
##    5    &amp;lt;U+2587&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2586&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2582&amp;gt;
##  335    &amp;lt;U+2583&amp;gt;&amp;lt;U+2587&amp;gt;&amp;lt;U+2583&amp;gt;&amp;lt;U+2585&amp;gt;&amp;lt;U+2582&amp;gt;&amp;lt;U+2583&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;
##   33.9  &amp;lt;U+2583&amp;gt;&amp;lt;U+2587&amp;gt;&amp;lt;U+2587&amp;gt;&amp;lt;U+2587&amp;gt;&amp;lt;U+2583&amp;gt;&amp;lt;U+2582&amp;gt;&amp;lt;U+2582&amp;gt;&amp;lt;U+2582&amp;gt;
##   22.9  &amp;lt;U+2583&amp;gt;&amp;lt;U+2582&amp;gt;&amp;lt;U+2587&amp;gt;&amp;lt;U+2586&amp;gt;&amp;lt;U+2583&amp;gt;&amp;lt;U+2583&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;
##    1    &amp;lt;U+2587&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2586&amp;gt;
##    5.42 &amp;lt;U+2583&amp;gt;&amp;lt;U+2583&amp;gt;&amp;lt;U+2583&amp;gt;&amp;lt;U+2587&amp;gt;&amp;lt;U+2586&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2581&amp;gt;&amp;lt;U+2582&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I’m sure there may be many other super cool functions, please DM me at &lt;strong&gt;&lt;span class=&#34;citation&#34;&gt;@IhaddadenFodil&lt;/span&gt;&lt;/strong&gt; if I’ve missed something.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Working with R Built-in Data Sets</title>
      <link>/post/working_with_r_built_in_data_sets/working-with-r-built-in-data-sets/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +0000</pubDate>
      <guid>/post/working_with_r_built_in_data_sets/working-with-r-built-in-data-sets/</guid>
      <description>


&lt;p&gt;In my tutorials, I prefer to work with the mtcars data set (DST) because I find it pretty straightforward. Nonetheless, one may be attempted to play and try some functions on a specific kind of DST. What is great in R is that it cames with a variety of pre-built DST. Yes, you just have to choose!&lt;/p&gt;
&lt;div id=&#34;r-base-data-sets&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;R Base Data Sets&lt;/h1&gt;
&lt;p&gt;Base DSTs are the data bases available within the base R. They are not related to any installed package. If you want to display the title of the full list of R base DSTs, you can write the following very simple command:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data &amp;lt;- data() 

R_base &amp;lt;- data$results[,3] # All base R data sets

head(R_base)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;AirPassengers&amp;quot;          &amp;quot;BJsales&amp;quot;               
## [3] &amp;quot;BJsales.lead (BJsales)&amp;quot; &amp;quot;BOD&amp;quot;                   
## [5] &amp;quot;CO2&amp;quot;                    &amp;quot;ChickWeight&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can also print the description of each DST.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;R_base_description &amp;lt;- data$results[,4]

head(R_base_description)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Monthly Airline Passenger Numbers 1949-1960&amp;quot;   
## [2] &amp;quot;Sales Data with Leading Indicator&amp;quot;             
## [3] &amp;quot;Sales Data with Leading Indicator&amp;quot;             
## [4] &amp;quot;Biochemical Oxygen Demand&amp;quot;                     
## [5] &amp;quot;Carbon Dioxide Uptake in Grass Plants&amp;quot;         
## [6] &amp;quot;Weight versus age of chicks on different diets&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can have both …&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;base_base &amp;lt;- cbind(R_base,R_base_description )

base_base &amp;lt;- as.data.frame(base_base)

head(base_base)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                   R_base                             R_base_description
## 1          AirPassengers    Monthly Airline Passenger Numbers 1949-1960
## 2                BJsales              Sales Data with Leading Indicator
## 3 BJsales.lead (BJsales)              Sales Data with Leading Indicator
## 4                    BOD                      Biochemical Oxygen Demand
## 5                    CO2          Carbon Dioxide Uptake in Grass Plants
## 6            ChickWeight Weight versus age of chicks on different diets&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;getting-all-the-available-dsts&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Getting All the Available DSTs&lt;/h1&gt;
&lt;p&gt;Some packages, available on CRAN or Github come with one or many data sets. For example, if you install the famous &lt;strong&gt;dplyr&lt;/strong&gt;, you’ll get for free the cool &lt;a href=&#34;https://rdrr.io/cran/dplyr/man/starwars.html&#34;&gt;starwars&lt;/a&gt; DST. In order to list all your DSTs according to the packages that you’ve installed, execute the following command:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data(package = .packages(all.available = TRUE))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Imagine you’re a big fan of carbon (why not) and you’re too lazy (like me) to open your browser. The following command lists ALL (base and installed) packages that contains the word “carbon” in their DSTs’ description.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ALL_packages &amp;lt;- data(package = .packages(all.available = TRUE))

ALL_packages &amp;lt;- ALL_packages[[3]]

ALL_packages[grep(&amp;quot;carbon&amp;quot;, ALL_packages[, 4], ignore.case = TRUE), ]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      Package    LibPath                              Item          
## [1,] &amp;quot;datasets&amp;quot; &amp;quot;C:/Program Files/R/R-3.6.1/library&amp;quot; &amp;quot;CO2&amp;quot;         
## [2,] &amp;quot;abd&amp;quot;      &amp;quot;C:/Program Files/R/R-3.6.1/library&amp;quot; &amp;quot;AlgaeCO2&amp;quot;    
## [3,] &amp;quot;agridat&amp;quot;  &amp;quot;C:/Program Files/R/R-3.6.1/library&amp;quot; &amp;quot;waynick.soil&amp;quot;
## [4,] &amp;quot;boot&amp;quot;     &amp;quot;C:/Program Files/R/R-3.6.1/library&amp;quot; &amp;quot;co.transfer&amp;quot; 
## [5,] &amp;quot;fields&amp;quot;   &amp;quot;C:/Program Files/R/R-3.6.1/library&amp;quot; &amp;quot;WorldBankCO2&amp;quot;
##      Title                                                              
## [1,] &amp;quot;Carbon Dioxide Uptake in Grass Plants&amp;quot;                            
## [2,] &amp;quot;Carbon Dioxide and Growth Rate in Algae&amp;quot;                          
## [3,] &amp;quot;Soil nitrogen and carbon in two fields&amp;quot;                           
## [4,] &amp;quot;Carbon Monoxide Transfer&amp;quot;                                         
## [5,] &amp;quot;Carbon emissions and demographic covariables by country for 1999.&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, let’s say you have found your &lt;em&gt;âme sœur&lt;/em&gt; and it’s the &lt;em&gt;Carbon Dioxide and Growth Rate in Algae&lt;/em&gt; DST. To load it into your environment, use:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(abd) # First load the corresponding package

data(&amp;quot;AlgaeCO2&amp;quot;) # load the AlgaeCO2

AlgaeCO2 &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     treatment growthrate
## 1  normal CO2       2.31
## 2  normal CO2       1.95
## 3  normal CO2       1.86
## 4  normal CO2       1.59
## 5  normal CO2       1.55
## 6  normal CO2       1.30
## 7  normal CO2       1.07
## 8    high CO2       2.37
## 9    high CO2       1.89
## 10   high CO2       1.55
## 11   high CO2       1.49
## 12   high CO2       1.26
## 13   high CO2       1.20
## 14   high CO2       0.98&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Clean your Data with the janitor package</title>
      <link>/post/clean_your_data_with_the_janitor_package/clean-your-data-with-the-janitor-package/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      <guid>/post/clean_your_data_with_the_janitor_package/clean-your-data-with-the-janitor-package/</guid>
      <description>


&lt;p&gt;The janitor package in an excellent tool for cleaning a messy database and summarize information. We’ve all heard that data analysts allocate about 70% of their time to data cleaning and wrangling. With janitor, this is straightforward. In this tutorial, we’ll present some (not all !!!) janitor cool functions. Of course, we use the mtcars R base dataset to provide for reproducible examples. Let’s have a look to the variables.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(mtcars)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                    mpg cyl disp  hp drat    wt  qsec vs am gear carb
## Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4
## Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4
## Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1
## Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1
## Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2
## Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, just for the fun, we rename our columns in a messy way :&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)


mtcars_messy &amp;lt;- mtcars %&amp;gt;% rename(
  &amp;quot;MILES PER! Galon&amp;quot; = mpg, 
  &amp;quot;NUMBER OF cylinders&amp;quot; = cyl, 
  &amp;quot;WEIGHT !!!!???&amp;quot; = wt
)

names(mtcars_messy)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;MILES PER! Galon&amp;quot;    &amp;quot;NUMBER OF cylinders&amp;quot; &amp;quot;disp&amp;quot;               
##  [4] &amp;quot;hp&amp;quot;                  &amp;quot;drat&amp;quot;                &amp;quot;WEIGHT !!!!???&amp;quot;     
##  [7] &amp;quot;qsec&amp;quot;                &amp;quot;vs&amp;quot;                  &amp;quot;am&amp;quot;                 
## [10] &amp;quot;gear&amp;quot;                &amp;quot;carb&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One must admit that we usually have to deal with this kind of variables’ names. Tired of renaming them one by one ? one answer : &lt;strong&gt;janitor::clean_names()&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(janitor)

mtcars_cleaned &amp;lt;- mtcars_messy %&amp;gt;% clean_names()

names(mtcars_cleaned)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;miles_per_galon&amp;quot;     &amp;quot;number_of_cylinders&amp;quot; &amp;quot;disp&amp;quot;               
##  [4] &amp;quot;hp&amp;quot;                  &amp;quot;drat&amp;quot;                &amp;quot;weight&amp;quot;             
##  [7] &amp;quot;qsec&amp;quot;                &amp;quot;vs&amp;quot;                  &amp;quot;am&amp;quot;                 
## [10] &amp;quot;gear&amp;quot;                &amp;quot;carb&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pretty cool isn’t ? There is another interesting tool in janitor. The &lt;strong&gt;get_dupes&lt;/strong&gt; function allows us to detect duplicates within a dataframe. Just to check how it works, we create duplicated rows:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mtcars &amp;lt;- rownames_to_column(mtcars, var = &amp;quot;car_name&amp;quot;) # Transforming our rows&amp;#39; names to a column entitled &amp;quot;car_name&amp;quot;

mtcars_dupli &amp;lt;- mtcars %&amp;gt;% rbind(mtcars[5:7, ])    # We&amp;#39;re  duplicating the 5, 6 and 7th rows

nrow(mtcars_dupli) # We have indeed 35 rows (3 more than the classic mtcars)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 35&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;How can we find duplicates ? easy !&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mtcars_dupli %&amp;gt;% get_dupes(car_name) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 13
##   car_name dupe_count   mpg   cyl  disp    hp  drat    wt  qsec    vs    am
##   &amp;lt;chr&amp;gt;         &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1 Duster ~          2  14.3     8   360   245  3.21  3.57  15.8     0     0
## 2 Duster ~          2  14.3     8   360   245  3.21  3.57  15.8     0     0
## 3 Hornet ~          2  18.7     8   360   175  3.15  3.44  17.0     0     0
## 4 Hornet ~          2  18.7     8   360   175  3.15  3.44  17.0     0     0
## 5 Valiant           2  18.1     6   225   105  2.76  3.46  20.2     1     0
## 6 Valiant           2  18.1     6   225   105  2.76  3.46  20.2     1     0
## # ... with 2 more variables: gear &amp;lt;dbl&amp;gt;, carb &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you see, the function even indicates the duplication counts (in our case 2 as we’ve added one duplicate to each observation)&lt;/p&gt;
&lt;div id=&#34;i-adorn_-tabyl&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;I adorn_() tabyl()&lt;/h2&gt;
&lt;p&gt;With janitor, one can also get valuable information in a tabular form. The &lt;strong&gt;tabyl()&lt;/strong&gt; function works approximately like the table base R but offers a much better aesthetic. Let’s check the differences:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mtcars_dupli$car_name %&amp;gt;% table()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## .
##         AMC Javelin  Cadillac Fleetwood          Camaro Z28 
##                   1                   1                   1 
##   Chrysler Imperial          Datsun 710    Dodge Challenger 
##                   1                   1                   1 
##          Duster 360        Ferrari Dino            Fiat 128 
##                   2                   1                   1 
##           Fiat X1-9      Ford Pantera L         Honda Civic 
##                   1                   1                   1 
##      Hornet 4 Drive   Hornet Sportabout Lincoln Continental 
##                   1                   2                   1 
##        Lotus Europa       Maserati Bora           Mazda RX4 
##                   1                   1                   1 
##       Mazda RX4 Wag            Merc 230           Merc 240D 
##                   1                   1                   1 
##            Merc 280           Merc 280C          Merc 450SE 
##                   1                   1                   1 
##          Merc 450SL         Merc 450SLC    Pontiac Firebird 
##                   1                   1                   1 
##       Porsche 914-2      Toyota Corolla       Toyota Corona 
##                   1                   1                   1 
##             Valiant          Volvo 142E 
##                   2                   1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;not so georgous, I agree. Now, let’s see what &lt;strong&gt;tabyl()&lt;/strong&gt; function does :&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mtcars_dupli$car_name %&amp;gt;% tabyl()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                    . n    percent
##          AMC Javelin 1 0.02857143
##   Cadillac Fleetwood 1 0.02857143
##           Camaro Z28 1 0.02857143
##    Chrysler Imperial 1 0.02857143
##           Datsun 710 1 0.02857143
##     Dodge Challenger 1 0.02857143
##           Duster 360 2 0.05714286
##         Ferrari Dino 1 0.02857143
##             Fiat 128 1 0.02857143
##            Fiat X1-9 1 0.02857143
##       Ford Pantera L 1 0.02857143
##          Honda Civic 1 0.02857143
##       Hornet 4 Drive 1 0.02857143
##    Hornet Sportabout 2 0.05714286
##  Lincoln Continental 1 0.02857143
##         Lotus Europa 1 0.02857143
##        Maserati Bora 1 0.02857143
##            Mazda RX4 1 0.02857143
##        Mazda RX4 Wag 1 0.02857143
##             Merc 230 1 0.02857143
##            Merc 240D 1 0.02857143
##             Merc 280 1 0.02857143
##            Merc 280C 1 0.02857143
##           Merc 450SE 1 0.02857143
##           Merc 450SL 1 0.02857143
##          Merc 450SLC 1 0.02857143
##     Pontiac Firebird 1 0.02857143
##        Porsche 914-2 1 0.02857143
##       Toyota Corolla 1 0.02857143
##        Toyota Corona 1 0.02857143
##              Valiant 2 0.05714286
##           Volvo 142E 1 0.02857143&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’re not done yet ! This function can also be applied to generate contingency tables. Suppose, we want to get the number of cylinders according to the type of transmission (0 = automatic, 1 = manuel) :&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mtcars_dupli %&amp;gt;% tabyl(am, cyl)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  am 4 6  8
##   0 3 5 14
##   1 8 3  2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We get the information but it’s not very pretty right ? don’t panic, the janitor package provides the &lt;strong&gt;adorn_&lt;/strong&gt; functions which generate a variety of summary information :&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mtcars_dupli %&amp;gt;% tabyl(am, cyl) %&amp;gt;% 
  adorn_totals(where = c(&amp;quot;row&amp;quot;, &amp;quot;col&amp;quot;))  # get the rows and columns sum&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     am  4 6  8 Total
##      0  3 5 14    22
##      1  8 3  2    13
##  Total 11 8 16    35&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mtcars_dupli %&amp;gt;% tabyl(am, cyl) %&amp;gt;% 
  adorn_totals(where = c(&amp;quot;row&amp;quot;, &amp;quot;col&amp;quot;)) %&amp;gt;% 
  adorn_percentages(&amp;quot;all&amp;quot;) %&amp;gt;%            # getting the proportions
  adorn_pct_formatting() %&amp;gt;%              # formatting values in %
  adorn_ns(position = &amp;quot;rear&amp;quot;) %&amp;gt;%         # diplaying counts &amp;quot;behind&amp;quot; the previously calculated percentages
  adorn_title(placement = &amp;quot;combined&amp;quot;)     # display a &amp;quot;combined&amp;quot; title (am/cyl) (checkout &amp;quot;top&amp;quot; for another view)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  am/cyl          4         6          8       Total
##       0  8.6%  (3) 14.3% (5) 40.0% (14)  62.9% (22)
##       1 22.9%  (8)  8.6% (3)  5.7%  (2)  37.1% (13)
##   Total 31.4% (11) 22.9% (8) 45.7% (16) 100.0% (35)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, it’s possible to convert our results into great looking HTML tables using the &lt;strong&gt;kable&lt;/strong&gt; function from the &lt;a href=&#34;https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html&#34;&gt;knitr&lt;/a&gt; package :&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(knitr)
mtcars_dupli %&amp;gt;% tabyl(am, cyl) %&amp;gt;% 
  adorn_totals(where = c(&amp;quot;row&amp;quot;, &amp;quot;col&amp;quot;)) %&amp;gt;% 
  adorn_percentages(&amp;quot;all&amp;quot;) %&amp;gt;%            
  adorn_pct_formatting() %&amp;gt;%              
  adorn_ns(position = &amp;quot;rear&amp;quot;) %&amp;gt;%         
  adorn_title(placement = &amp;quot;combined&amp;quot;) %&amp;gt;% 
  kable() &lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;am/cyl&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;4&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;6&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;8&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Total&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8.6% (3)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;14.3% (5)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;40.0% (14)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;62.9% (22)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;22.9% (8)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8.6% (3)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;5.7% (2)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;37.1% (13)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Total&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;31.4% (11)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;22.9% (8)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;45.7% (16)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;100.0% (35)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;That’s it for this tutorial nevertheless I highly recommend taking a look to the official package’s &lt;a href=&#34;https://github.com/sfirke/janitor&#34;&gt;vignette&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Intro to the case_when function</title>
      <link>/post/case_when/case-when-function/</link>
      <pubDate>Sat, 31 Aug 2019 00:00:00 +0000</pubDate>
      <guid>/post/case_when/case-when-function/</guid>
      <description>


&lt;p&gt;&lt;code&gt;case_when()&lt;/code&gt; is a &lt;strong&gt;dplyr&lt;/strong&gt; function that returns a value according to predifined conditions. It’s a very powerful function though not very famous. In our example, we’ll use the mtcars dataset (just as usual).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(mtcars)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                    mpg cyl disp  hp drat    wt  qsec vs am gear carb
## Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4
## Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4
## Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1
## Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1
## Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2
## Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Suppose in the context of a study we want to categorize the cars into two factors : &lt;strong&gt;Climate_Friendly&lt;/strong&gt; and &lt;strong&gt;Climate_Unfriendly&lt;/strong&gt; according to the &lt;em&gt;horsepower (hp)&lt;/em&gt; median. We can create a new column that incoporates this information using the &lt;code&gt;case_when()&lt;/code&gt; and &lt;code&gt;mutate&lt;/code&gt; functions:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)
library(magrittr) # required for the %&amp;gt;% 

median &amp;lt;- median(mtcars$hp) # first, we calculate our median 

new_df &amp;lt;- mtcars %&amp;gt;% mutate(climat_categ = case_when(
    hp &amp;lt; median ~ &amp;quot;friendly&amp;quot;,
    hp &amp;gt;= median ~ &amp;quot;unfriendly&amp;quot;
    ))


new_df$climat_categ &amp;lt;- as.factor(new_df$climat_categ)

new_df %&amp;gt;% select(hp, climat_categ)  # A quick check ! &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     hp climat_categ
## 1  110     friendly
## 2  110     friendly
## 3   93     friendly
## 4  110     friendly
## 5  175   unfriendly
## 6  105     friendly
## 7  245   unfriendly
## 8   62     friendly
## 9   95     friendly
## 10 123   unfriendly
## 11 123   unfriendly
## 12 180   unfriendly
## 13 180   unfriendly
## 14 180   unfriendly
## 15 205   unfriendly
## 16 215   unfriendly
## 17 230   unfriendly
## 18  66     friendly
## 19  52     friendly
## 20  65     friendly
## 21  97     friendly
## 22 150   unfriendly
## 23 150   unfriendly
## 24 245   unfriendly
## 25 175   unfriendly
## 26  66     friendly
## 27  91     friendly
## 28 113     friendly
## 29 264   unfriendly
## 30 175   unfriendly
## 31 335   unfriendly
## 32 109     friendly&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’us plot the count of the cars according to the ‘climat_categ’ variable.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)

ggplot(new_df, aes(x =climat_categ))+ 
  geom_bar(stat = &amp;quot;count&amp;quot;, fill = &amp;quot;darkolivegreen1&amp;quot;, color = &amp;quot;blue&amp;quot;) +
  theme_classic()+
  labs(title =&amp;quot;Count distribution of eco and non-eco friendly cars&amp;quot;, x = &amp;quot;&amp;quot; )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/case_when/2019-08-31-case-when-function_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Importing and Visualizing Stock Market Data in R</title>
      <link>/post/stocks-analysis-with-r/importing-and-visualizing-stock-market-data-in-r/</link>
      <pubDate>Mon, 19 Aug 2019 00:00:00 +0000</pubDate>
      <guid>/post/stocks-analysis-with-r/importing-and-visualizing-stock-market-data-in-r/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/pymjs/pym.v1.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/widgetframe-binding/widgetframe.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;In this tutorial, we’ll analyze the French CAC 40 stocks. Listed CAC 40 firms can be found at the &lt;a href=&#34;https://finance.yahoo.com/quote/%5EFCHI/components/&#34;&gt;Yahoo Finance website&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&#34;getting-the-symbols&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Getting the Symbols&lt;/h2&gt;
&lt;p&gt;First, we need to obtain the associated Yahoo symbols for each CAC 40 stock. Example: for Danone S.A, we have the correspnding symbol &lt;a href=&#34;https://finance.yahoo.com/quote/BN.PA?p=BN.PA&#34;&gt;BN.PA&lt;/a&gt;. From Yahoo Finance we use the &lt;a href=&#34;https://cran.r-project.org/web/packages/datapasta/vignettes/how-to-datapasta.html&#34;&gt;DataPasta package&lt;/a&gt; to copy and paste the entire data table (We have modified the the column’s name &lt;strong&gt;% Change&lt;/strong&gt; to deal with R naming requirement). Then we select the &lt;strong&gt;Symbol&lt;/strong&gt; column.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)


base_data &amp;lt;- data.frame(stringsAsFactors=FALSE,
         Symbol = c(&amp;quot;VIE.PA&amp;quot;, &amp;quot;AI.PA&amp;quot;, &amp;quot;BN.PA&amp;quot;, &amp;quot;ACA.PA&amp;quot;, &amp;quot;CA.PA&amp;quot;, &amp;quot;ML.PA&amp;quot;,
                    &amp;quot;BNP.PA&amp;quot;, &amp;quot;RI.PA&amp;quot;, &amp;quot;SU.PA&amp;quot;, &amp;quot;VIV.PA&amp;quot;, &amp;quot;ENGI.PA&amp;quot;, &amp;quot;CAP.PA&amp;quot;,
                    &amp;quot;LR.PA&amp;quot;, &amp;quot;ORA.PA&amp;quot;, &amp;quot;AC.PA&amp;quot;, &amp;quot;HO.PA&amp;quot;, &amp;quot;KER.PA&amp;quot;, &amp;quot;GLE.PA&amp;quot;,
                    &amp;quot;EN.PA&amp;quot;, &amp;quot;SGO.PA&amp;quot;, &amp;quot;SAN.PA&amp;quot;, &amp;quot;DG.PA&amp;quot;, &amp;quot;ATO.PA&amp;quot;, &amp;quot;OR.PA&amp;quot;, &amp;quot;SW.PA&amp;quot;,
                    &amp;quot;UG.PA&amp;quot;, &amp;quot;AIR.PA&amp;quot;, &amp;quot;MC.PA&amp;quot;, &amp;quot;FP.PA&amp;quot;, &amp;quot;FTI.PA&amp;quot;),
   Company.Name = c(&amp;quot;Veolia Environnement S.A.&amp;quot;, &amp;quot;L&amp;#39;Air Liquide S.A.&amp;quot;,
                    &amp;quot;Danone S.A.&amp;quot;, &amp;quot;Crédit Agricole S.A.&amp;quot;, &amp;quot;Carrefour SA&amp;quot;,
                    &amp;quot;Compagnie Générale des Établissements Michelin&amp;quot;,
                    &amp;quot;BNP Paribas SA&amp;quot;, &amp;quot;Pernod Ricard SA&amp;quot;, &amp;quot;Schneider Electric S.E.&amp;quot;,
                    &amp;quot;Vivendi SA&amp;quot;, &amp;quot;ENGIE SA&amp;quot;, &amp;quot;Capgemini SE&amp;quot;, &amp;quot;Legrand SA&amp;quot;, &amp;quot;Orange S.A.&amp;quot;,
                    &amp;quot;Accor SA&amp;quot;, &amp;quot;Thales S.A.&amp;quot;, &amp;quot;Kering SA&amp;quot;,
                    &amp;quot;Société Générale Société anonyme&amp;quot;, &amp;quot;Bouygues SA&amp;quot;,
                    &amp;quot;Compagnie de Saint-Gobain S.A.&amp;quot;, &amp;quot;Sanofi&amp;quot;, &amp;quot;VINCI SA&amp;quot;, &amp;quot;Atos SE&amp;quot;, &amp;quot;L&amp;#39;Oréal S.A.&amp;quot;,
                    &amp;quot;Sodexo S.A.&amp;quot;, &amp;quot;Peugeot S.A.&amp;quot;, &amp;quot;Airbus SE&amp;quot;,
                    &amp;quot;LVMH Moët Hennessy - Louis Vuitton, Société Européenne&amp;quot;, &amp;quot;TOTAL S.A.&amp;quot;,
                    &amp;quot;TechnipFMC plc&amp;quot;),
     Last.Price = c(21.93, 123.35, 80.24, 10.26, 15.49, 93.32, 40.86, 158.05,
                    73.12, 25.64, 13.57, 106.35, 61.98, 13.6, 38.3, 102.9,
                    437.6, 22.35, 32.4, 32.33, 77.04, 96.82, 66.92, 236.7, 101.6,
                    19.34, 125.32, 355.2, 44.08, 21.73),
         Change = c(0, 0.15, 0.14, 0.03, 0.06, 0.48, 0.25, -1.05, 0.48, 0.17,
                    0.11, 1.05, 0.62, 0.14, 0.42, 1.2, 5.3, 0.28, 0.42, 0.43,
                    1.05, 1.34, 0.94, 3.4, 1.62, 0.34, 2.3, 6.75, 0.85, 0.75),
        Change_prc = c(&amp;quot;0.00%&amp;quot;, &amp;quot;+0.12%&amp;quot;, &amp;quot;+0.17%&amp;quot;, &amp;quot;+0.24%&amp;quot;, &amp;quot;+0.39%&amp;quot;, &amp;quot;+0.52%&amp;quot;,
                    &amp;quot;+0.62%&amp;quot;, &amp;quot;-0.66%&amp;quot;, &amp;quot;+0.66%&amp;quot;, &amp;quot;+0.67%&amp;quot;, &amp;quot;+0.82%&amp;quot;, &amp;quot;+1.00%&amp;quot;,
                    &amp;quot;+1.01%&amp;quot;, &amp;quot;+1.08%&amp;quot;, &amp;quot;+1.11%&amp;quot;, &amp;quot;+1.18%&amp;quot;, &amp;quot;+1.23%&amp;quot;, &amp;quot;+1.29%&amp;quot;,
                    &amp;quot;+1.31%&amp;quot;, &amp;quot;+1.35%&amp;quot;, &amp;quot;+1.38%&amp;quot;, &amp;quot;+1.40%&amp;quot;, &amp;quot;+1.42%&amp;quot;, &amp;quot;+1.46%&amp;quot;,
                    &amp;quot;+1.62%&amp;quot;, &amp;quot;+1.79%&amp;quot;, &amp;quot;+1.87%&amp;quot;, &amp;quot;+1.94%&amp;quot;, &amp;quot;+1.97%&amp;quot;, &amp;quot;+3.57%&amp;quot;),
         Volume = c(818027, 264260, 461968, 3363436, 772440, 275617, 3304556,
                    167013, 408078, 788907, 2077728, 221310, 258356, 3729428,
                    202482, 178755, 128660, 2969772, 264297, 640992, 1164010,
                    708090, 202814, 322746, 88158, 814983, 432166, 306987, 2264031,
                    777895)
)


Symbols &amp;lt;- base_data %&amp;gt;% select(Symbol)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;loading-stock-prices-data&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Loading Stock Prices Data&lt;/h1&gt;
&lt;p&gt;In order to import the stock prices, we use the &lt;strong&gt;getSymbols()&lt;/strong&gt; function from the &lt;strong&gt;quantmod&lt;/strong&gt; package. Let’s say we are interested in the evolution of CAC 40 Adjusted Prices from the 15/07/2019 to 15/08/2019. The map(~Ad(get(.))) is used to extract the Adjusted Prices from the imported prices.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(quantmod)

cac_prices &amp;lt;- getSymbols(Symbols$Symbol, 
                     src = &amp;quot;yahoo&amp;quot;,
                     from = &amp;quot;2019-07-15&amp;quot;,
                     to = &amp;quot;2019-08-15&amp;quot;,
                     auto.assign = TRUE,
                     warnings = FALSE) %&amp;gt;% 
  map(~Ad(get(.))) %&amp;gt;% 
  reduce(merge) %&amp;gt;% 
  &amp;quot;colnames&amp;lt;-&amp;quot;(Symbols$Symbol)


head(cac_prices, n = 2) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##            VIE.PA  AI.PA BN.PA ACA.PA CA.PA  ML.PA BNP.PA  RI.PA SU.PA
## 2019-07-15  22.58 123.15 75.86  11.01  17.9 111.55 42.840 157.30 77.02
## 2019-07-16  22.59 123.05 75.68  11.12  18.0 110.00 43.205 157.05 77.98
##            VIV.PA ENGI.PA CAP.PA LR.PA ORA.PA AC.PA HO.PA KER.PA GLE.PA
## 2019-07-15  24.89  13.870 113.85 63.28 13.305 39.94 104.4  519.9 22.815
## 2019-07-16  24.91  13.765 114.60 63.68 13.330 39.85 105.2  530.6 23.100
##            EN.PA SGO.PA SAN.PA DG.PA ATO.PA OR.PA SW.PA UG.PA AIR.PA
## 2019-07-15 32.01 33.885  73.79  91.8  78.02 250.5 102.7 22.23 129.20
## 2019-07-16 32.90 34.670  74.32  94.3  79.24 251.3 102.5 22.32 131.14
##             MC.PA  FP.PA   FTI.PA
## 2019-07-15 380.05 50.090 22.41107
## 2019-07-16 385.30 49.965 22.51045&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using the getSymbols() function, we’ve obtained an &lt;strong&gt;xts&lt;/strong&gt; object. xts or Extensible Time Series are dataframes indexed with dates.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;stock-prices-visualization-with-highcharter&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Stock Prices Visualization with highcharter&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;highcharter&lt;/strong&gt; offers highly reactive time series visualizations. Suppose we are interested in plotting French banks adjusted prices.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(highcharter)


plot1 &amp;lt;- highchart(type = &amp;quot;stock&amp;quot;) %&amp;gt;% 
  hc_title(text = &amp;quot;Stocks&amp;#39; Evolution of French CAC 40 listed banks&amp;quot;) %&amp;gt;% 
  hc_add_series(cac_prices$ACA.PA, name=&amp;quot;Crédit Agricole&amp;quot;) %&amp;gt;% 
  hc_add_series(cac_prices$BNP.PA, name=&amp;quot;BNP Paribas&amp;quot;) %&amp;gt;% 
  hc_add_series(cac_prices$GLE.PA, name=&amp;quot;Société Générale&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:100%;height:480px;&#34; class=&#34;widgetframe html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;url&#34;:&#34;/post/stocks-analysis-with-r/2019-08-19-stocks-analysis-with-r_files/figure-html//widgets/widget_unnamed-chunk-5.html&#34;,&#34;options&#34;:{&#34;xdomain&#34;:&#34;*&#34;,&#34;allowfullscreen&#34;:false,&#34;lazyload&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;From the above chart, we observe a very small variation. This is not suprising as the the considered period is short (1 month). Let us consider a longer period (1 year).
s&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Symbol_banks &amp;lt;- c(&amp;quot;ACA.PA&amp;quot;, &amp;quot;BNP.PA&amp;quot;, &amp;quot;GLE.PA&amp;quot;)

cac_banks &amp;lt;- getSymbols(Symbol_banks, 
                     src = &amp;quot;yahoo&amp;quot;,
                     from = &amp;quot;2018-08-18&amp;quot;,
                     to = &amp;quot;2019-08-18&amp;quot;,
                     auto.assign = TRUE,
                     warnings = FALSE) %&amp;gt;% 
  map(~Ad(get(.))) %&amp;gt;% 
  reduce(merge) %&amp;gt;% 
  &amp;quot;colnames&amp;lt;-&amp;quot;(Symbol_banks)


plot2 &amp;lt;- highchart(type = &amp;quot;stock&amp;quot;) %&amp;gt;% 
  hc_title(text = &amp;quot;Stocks&amp;#39; Evolution of French CAC 40 Listed Banks&amp;quot;) %&amp;gt;% 
  hc_add_series(cac_banks$ACA.PA, name=&amp;quot;Crédit Agricole&amp;quot;) %&amp;gt;% 
  hc_add_series(cac_banks$BNP.PA, name=&amp;quot;BNP Paribas&amp;quot;) %&amp;gt;% 
  hc_add_series(cac_banks$GLE.PA, name=&amp;quot;Société Générale&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-2&#34; style=&#34;width:100%;height:480px;&#34; class=&#34;widgetframe html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-2&#34;&gt;{&#34;x&#34;:{&#34;url&#34;:&#34;/post/stocks-analysis-with-r/2019-08-19-stocks-analysis-with-r_files/figure-html//widgets/widget_unnamed-chunk-7.html&#34;,&#34;options&#34;:{&#34;xdomain&#34;:&#34;*&#34;,&#34;allowfullscreen&#34;:false,&#34;lazyload&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Graphical Mapping with R</title>
      <link>/post/graphical_mapping/graphical-mapping-with-r/</link>
      <pubDate>Fri, 09 Aug 2019 00:00:00 +0000</pubDate>
      <guid>/post/graphical_mapping/graphical-mapping-with-r/</guid>
      <description>


&lt;p&gt;Mapping with R is a real joy. To see some examples, we’ll rely on the &lt;a href=&#34;https://cran.r-project.org/web/packages/maps/maps.pdf&#34;&gt;maps&lt;/a&gt; package.&lt;/p&gt;
&lt;div id=&#34;mapping-the-world&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Mapping the World&lt;/h1&gt;
&lt;div id=&#34;getting-the-longitude-and-latitude&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Getting the longitude and latitude&lt;/h2&gt;
&lt;p&gt;First of all, we need to get the long and lat data in order to plot with ggplot2 which provides graphs with more aesthetic. (for an introduction to the ggplot2 package, just click &lt;a href=&#34;https://ihaddadenfodil.com/post/an-introduction-to-the-ggplot2-package/&#34;&gt;here&lt;/a&gt;). To do that, we’ll use the &lt;strong&gt;map_data()&lt;/strong&gt; function which belongs to ggplot2 and put as a parameter the &lt;strong&gt;world&lt;/strong&gt; map provided by the &lt;strong&gt;maps&lt;/strong&gt; package.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(maps)
library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;world &amp;lt;- map_data(&amp;quot;world&amp;quot;)

head(world)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        long      lat group order region subregion
## 1 -69.89912 12.45200     1     1  Aruba      &amp;lt;NA&amp;gt;
## 2 -69.89571 12.42300     1     2  Aruba      &amp;lt;NA&amp;gt;
## 3 -69.94219 12.43853     1     3  Aruba      &amp;lt;NA&amp;gt;
## 4 -70.00415 12.50049     1     4  Aruba      &amp;lt;NA&amp;gt;
## 5 -70.06612 12.54697     1     5  Aruba      &amp;lt;NA&amp;gt;
## 6 -70.05088 12.59707     1     6  Aruba      &amp;lt;NA&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To render our world geographical plot, we set &lt;em&gt;long&lt;/em&gt; to the x-axis and &lt;em&gt;lat&lt;/em&gt; to the y-axis. Finally, we set &lt;strong&gt;group = group&lt;/strong&gt; (&lt;em&gt;group&lt;/em&gt; is a variable that groups each observation according to the corresponding polygon).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(world, aes(x=long, y=lat, group=group)) +
  geom_polygon(fill=&amp;quot;lightgreen&amp;quot;, colour=&amp;quot;black&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/graphical_mapping/2019-08-09-graphical-mapping-with-r_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;mapping-regions&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Mapping Regions&lt;/h1&gt;
&lt;p&gt;Now we’ll use the &lt;strong&gt;region&lt;/strong&gt; parameter which extracts regional data from the world map. Let’us have a look to the region where I belong to, North Africa:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;north_africa &amp;lt;- map_data(&amp;quot;world&amp;quot;, region = c(
  &amp;quot;Algeria&amp;quot;,
  &amp;quot;Morocco&amp;quot;,
  &amp;quot;Tunisia&amp;quot;,
  &amp;quot;Egypt&amp;quot;,
  &amp;quot;Western Sahara&amp;quot;,
  &amp;quot;Libya&amp;quot;))

head(north_africa)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       long      lat group order  region subregion
## 1 8.576563 36.93721     1     1 Algeria      &amp;lt;NA&amp;gt;
## 2 8.597656 36.88388     1     2 Algeria      &amp;lt;NA&amp;gt;
## 3 8.601269 36.83393     1     3 Algeria      &amp;lt;NA&amp;gt;
## 4 8.506739 36.78750     1     4 Algeria      &amp;lt;NA&amp;gt;
## 5 8.444238 36.76074     1     5 Algeria      &amp;lt;NA&amp;gt;
## 6 8.369629 36.63252     1     6 Algeria      &amp;lt;NA&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order to differentiate among countries using colors, we set the parameter &lt;strong&gt;fill = region&lt;/strong&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(north_africa, aes(x = long, y = lat, group = group, fill = region)) + 
  geom_polygon(colour = &amp;quot;black&amp;quot;) + # colour = &amp;quot;black&amp;quot; is needed to emphasize borders
  theme_minimal()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/graphical_mapping/2019-08-09-graphical-mapping-with-r_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;geographical-filling&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Geographical Filling&lt;/h1&gt;
&lt;p&gt;Let us go deeper in our geographical plotting. Suppose we want to plot the French median revenue according to each borough (in french : “arrondissement”). The french median revenue data for 2015 is freely available at the &lt;a href=&#34;https://www.insee.fr/fr/statistiques/3560121&#34;&gt;INSEE website&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(readxl)

fr_median &amp;lt;- read_excel(&amp;quot;base-cc-filosofi-2015.xls&amp;quot;, skip = 5) # keep only the ARR tab in the Excel File. &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Furthermore, the &lt;a href=&#34;https://whatis.techtarget.com/fileformat/SHP-Shapefile-spatial-data-format-used-by-many-GIS-programs&#34;&gt;SHP&lt;/a&gt; file for France is available in the &lt;a href=&#34;https://www.eea.europa.eu/data-and-maps/data/eea-reference-grids-2/gis-files/france-shapefile&#34;&gt;European Environment Agency Data Base&lt;/a&gt;. In order to read our SHP file, we’ll rely on the &lt;strong&gt;sf&lt;/strong&gt; package.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(sf)

fr_map &amp;lt;- sf::st_read(&amp;quot;C:/Users/Administrateur/Desktop/SHP_France/FRA_adm3.shp&amp;quot;, stringsAsFactors = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Reading layer `FRA_adm3&amp;#39; from data source `C:\Users\Administrateur\Desktop\SHP_France\FRA_adm3.shp&amp;#39; using driver `ESRI Shapefile&amp;#39;
## Simple feature collection with 350 features and 13 fields
## geometry type:  MULTIPOLYGON
## dimension:      XY
## bbox:           xmin: -5.143751 ymin: 41.33375 xmax: 9.560416 ymax: 51.0894
## epsg (SRID):    4326
## proj4string:    +proj=longlat +datum=WGS84 +no_defs&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(fr_map, n = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Simple feature collection with 2 features and 13 fields
## geometry type:  MULTIPOLYGON
## dimension:      XY
## bbox:           xmin: 7.065385 ymin: 48.33202 xmax: 8.107299 ymax: 49.04169
## epsg (SRID):    4326
## proj4string:    +proj=longlat +datum=WGS84 +no_defs
##   ID_0 ISO NAME_0 ID_1 NAME_1 ID_2   NAME_2 ID_3   NAME_3         TYPE_3
## 1   79 FRA France    1 Alsace    1 Bas-Rhin    1 Haguenau Arrondissement
## 2   79 FRA France    1 Alsace    1 Bas-Rhin    2 Molsheim Arrondissement
##   ENGTYPE_3 NL_NAME_3 VARNAME_3                       geometry
## 1 Districts      &amp;lt;NA&amp;gt;      &amp;lt;NA&amp;gt; MULTIPOLYGON (((7.70342 48....
## 2 Districts      &amp;lt;NA&amp;gt;      &amp;lt;NA&amp;gt; MULTIPOLYGON (((7.317291 48...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we’ll combine the &lt;strong&gt;fr_map&lt;/strong&gt; and the &lt;strong&gt;fr_median&lt;/strong&gt; databases. To do so, we need to provide a common key.The column &lt;strong&gt;NAME_3&lt;/strong&gt; in &lt;strong&gt;fr_map&lt;/strong&gt; and the column &lt;strong&gt;LIBGEO&lt;/strong&gt; in &lt;strong&gt;fr_median&lt;/strong&gt; list our French boroughs. As mentioned previously, we must provide a unique key, therefore we’ll rename the &lt;strong&gt;NAME_3&lt;/strong&gt; as &lt;strong&gt;LIBGEO&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fr_map &amp;lt;- fr_map %&amp;gt;% rename(LIBGEO = NAME_3)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we’re ready to combine our databases and drop all values that do not correspond using the &lt;strong&gt;inner_join&lt;/strong&gt; function provided by the &lt;em&gt;tidyverse&lt;/em&gt; package.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;final &amp;lt;- inner_join(fr_map, fr_median, by = &amp;quot;LIBGEO&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It’s possible to use the ggplot2 package however I’d rather suggest the &lt;strong&gt;tmap&lt;/strong&gt; package:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tmap)

tm_shape(final)+
  tm_polygons(&amp;quot;MED15&amp;quot;, id  = &amp;quot;LIBGEO&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/graphical_mapping/2019-08-09-graphical-mapping-with-r_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Introduction to Deep Learning, What is a Tensor ? </title>
      <link>/post/introduction_to_deep_learning_what_is_a_tensor/introduction-to-deep-learning-what-is-a-tensor/</link>
      <pubDate>Fri, 09 Aug 2019 00:00:00 +0000</pubDate>
      <guid>/post/introduction_to_deep_learning_what_is_a_tensor/introduction-to-deep-learning-what-is-a-tensor/</guid>
      <description>


&lt;div id=&#34;tensors-definition&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Tensors Definition&lt;/h1&gt;
&lt;p&gt;Ever wandered why one of the most used Deep Learning library, &lt;strong&gt;Tenserflow&lt;/strong&gt; is called that way ? the name came from the fundamentals &lt;strong&gt;Tensors&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;According to Chollet F and Allaire JJ (Deep Learning with R und Keras, 2018), Tensors are a generalization of vectors and matrices to an arbitrary number of dimensions.&lt;/p&gt;
&lt;div id=&#34;dimension-tensors&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;0-Dimension Tensors&lt;/h2&gt;
&lt;p&gt;Scalars are considered to be the simplest form of Tensors.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;zero_Dim_Tens &amp;lt;- 6
zero_Dim_Tens&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 6&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;dimension-tensors-1&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;1-Dimension Tensors&lt;/h2&gt;
&lt;p&gt;Vectors are 1-Dimension Tensors.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;one_Dim_Tens &amp;lt;- c(12, 3, 6, 14, 10)
one_Dim_Tens&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 12  3  6 14 10&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str(one_Dim_Tens)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  num [1:5] 12 3 6 14 10&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;dimensions-tensors&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;2-Dimensions Tensors&lt;/h2&gt;
&lt;p&gt;Matrices are 2-Dimensions Tensors.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;two_Dim_Tens &amp;lt;- matrix(rep(1, 3*3), nrow = 3, ncol = 3)
two_Dim_Tens&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2] [,3]
## [1,]    1    1    1
## [2,]    1    1    1
## [3,]    1    1    1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str(two_Dim_Tens)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  num [1:3, 1:3] 1 1 1 1 1 1 1 1 1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;and-higher-dimensional-tensors&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;3 and higher-dimensional Tensors&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;array&lt;/em&gt; objects are Tensors which can have more than 2 dimensions. For example, if we include the above matrice into a new array:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;two_Dim_Tens &amp;lt;- array(rep(1, 3*3), dim = c(2, 3, 2))
two_Dim_Tens&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## , , 1
## 
##      [,1] [,2] [,3]
## [1,]    1    1    1
## [2,]    1    1    1
## 
## , , 2
## 
##      [,1] [,2] [,3]
## [1,]    1    1    1
## [2,]    1    1    1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str(two_Dim_Tens)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  num [1:2, 1:3, 1:2] 1 1 1 1 1 1 1 1 1 1 ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A Tensor whith the propoerty &lt;em&gt;num [1:2, 1:3, 1:2]&lt;/em&gt; can be read as an Integer Tensor with three &lt;em&gt;axes&lt;/em&gt; (Dimensions) and a shape of &lt;em&gt;2 3 2&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>An Introduction to the ggplot2 package. </title>
      <link>/post/an_introduction_to_ggplot2/an-introduction-to-the-ggplot2-package/</link>
      <pubDate>Thu, 08 Aug 2019 00:00:00 +0000</pubDate>
      <guid>/post/an_introduction_to_ggplot2/an-introduction-to-the-ggplot2-package/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/plotly-binding/plotly.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/typedarray/typedarray.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/jquery/jquery.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;/rmarkdown-libs/crosstalk/css/crosstalk.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;/rmarkdown-libs/crosstalk/js/crosstalk.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;/rmarkdown-libs/plotly-htmlwidgets-css/plotly-htmlwidgets.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;/rmarkdown-libs/plotly-main/plotly-latest.min.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;The &lt;a href=&#34;https://ggplot2.tidyverse.org/&#34;&gt;ggplot2&lt;/a&gt; package integrates the &lt;strong&gt;tidy&lt;/strong&gt; philosophy of programming introduced mainly by &lt;a href=&#34;https://twitter.com/hadleywickham&#34;&gt;Hadley Wickham&lt;/a&gt;. It is part of the &lt;strong&gt;tidyverse&lt;/strong&gt; package which includes several other packages related to the tidy world. Through this is tutorial, we’ll present some basic ggplot functionalities using the &lt;strong&gt;mtcars&lt;/strong&gt; data base.&lt;/p&gt;
&lt;p&gt;First of of all, you need to install the ggplot2 package which can be done either by&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;tidyverse&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;ggplot2&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;plotting-with-ggplot&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Plotting with ggplot&lt;/h1&gt;
&lt;p&gt;The mtcars object is a dataframe included in R that displays 10 aspects of automobile design and performance for 32 automobiles (1973–74 models). Let us have a quick overview of the mtcars dataset.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(mtcars)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                    mpg cyl disp  hp drat    wt  qsec vs am gear carb
## Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4
## Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4
## Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1
## Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1
## Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2
## Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We want to plot the relation between the miles per galon &lt;em&gt;(mpg)&lt;/em&gt; and the weights &lt;em&gt;(wt)&lt;/em&gt; of our cars’ models. To do that in ggplot2 one need to identify three principal elements (or two depending on your desired graph): The &lt;em&gt;database&lt;/em&gt; from which the information will be extracted, the &lt;em&gt;x-axis variable&lt;/em&gt; and the &lt;em&gt;y-axis variable&lt;/em&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2) # or library(tidyverse)

ggplot(data = mtcars, mapping = aes(x = mpg, y = wt))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/An_Introduction_to_ggplot2/2019-08-08-an-introduction-to-the-ggplot2-package_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;In the exemple above, we used the function &lt;strong&gt;ggplot&lt;/strong&gt; and two parameters &lt;em&gt;data &lt;/em&gt; and &lt;em&gt;mapping&lt;/em&gt; to structure our graph. The &lt;em&gt;mapping&lt;/em&gt; parameters determine which variable should be considered in which axis. To plot our volue we need to add another argument to our code. Suppose we want to plot a scatterplot :&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = mtcars, mapping = aes(x = mpg, y = wt)) +
  geom_point()   # geom_point() refers to scatterplot&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/An_Introduction_to_ggplot2/2019-08-08-an-introduction-to-the-ggplot2-package_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;To modify the size of the color of the displayed points, we just introduce the following parameters in the geom_point() function :&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = mtcars, mapping = aes(x = mpg, y = wt)) +
  geom_point(size = 3, color = &amp;quot;red&amp;quot;)   # geom_point() refers to scatterplot&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/An_Introduction_to_ggplot2/2019-08-08-an-introduction-to-the-ggplot2-package_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;For an exhaustive list of R colours, just check this &lt;a href=&#34;http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf&#34;&gt;website&lt;/a&gt;.
Now, if we want to modify the theme of our plot, proceed as follow :&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = mtcars, mapping = aes(x = mpg, y = wt)) +
  geom_point(size = 3, color = &amp;quot;red&amp;quot;) + 
  theme_bw()  #just tape theme and wait to see several choices&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/An_Introduction_to_ggplot2/2019-08-08-an-introduction-to-the-ggplot2-package_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;finally, it is possible to assign a plot to a defined variable :&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot1 &amp;lt;- ggplot(data = mtcars, mapping = aes(x = mpg, y = wt)) +
  geom_point(size = 3, color = &amp;quot;red&amp;quot;) + 
  theme_bw()  &lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;plotting-interactively-with-plotly&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Plotting Interactively with Plotly&lt;/h1&gt;
&lt;p&gt;Plotly is an interesting package that allows us to create interactive web graphics from ggplot2. Just convert our above scatterplot into an interactive one, just use the function &lt;strong&gt;ggplotly&lt;/strong&gt; :&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(plotly)  # Load the package after installing it

ggplotly(plot1)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:672px;height:480px;&#34; class=&#34;plotly html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;data&#34;:[{&#34;x&#34;:[21,21,22.8,21.4,18.7,18.1,14.3,24.4,22.8,19.2,17.8,16.4,17.3,15.2,10.4,10.4,14.7,32.4,30.4,33.9,21.5,15.5,15.2,13.3,19.2,27.3,26,30.4,15.8,19.7,15,21.4],&#34;y&#34;:[2.62,2.875,2.32,3.215,3.44,3.46,3.57,3.19,3.15,3.44,3.44,4.07,3.73,3.78,5.25,5.424,5.345,2.2,1.615,1.835,2.465,3.52,3.435,3.84,3.845,1.935,2.14,1.513,3.17,2.77,3.57,2.78],&#34;text&#34;:[&#34;mpg: 21.0&lt;br /&gt;wt: 2.620&#34;,&#34;mpg: 21.0&lt;br /&gt;wt: 2.875&#34;,&#34;mpg: 22.8&lt;br /&gt;wt: 2.320&#34;,&#34;mpg: 21.4&lt;br /&gt;wt: 3.215&#34;,&#34;mpg: 18.7&lt;br /&gt;wt: 3.440&#34;,&#34;mpg: 18.1&lt;br /&gt;wt: 3.460&#34;,&#34;mpg: 14.3&lt;br /&gt;wt: 3.570&#34;,&#34;mpg: 24.4&lt;br /&gt;wt: 3.190&#34;,&#34;mpg: 22.8&lt;br /&gt;wt: 3.150&#34;,&#34;mpg: 19.2&lt;br /&gt;wt: 3.440&#34;,&#34;mpg: 17.8&lt;br /&gt;wt: 3.440&#34;,&#34;mpg: 16.4&lt;br /&gt;wt: 4.070&#34;,&#34;mpg: 17.3&lt;br /&gt;wt: 3.730&#34;,&#34;mpg: 15.2&lt;br /&gt;wt: 3.780&#34;,&#34;mpg: 10.4&lt;br /&gt;wt: 5.250&#34;,&#34;mpg: 10.4&lt;br /&gt;wt: 5.424&#34;,&#34;mpg: 14.7&lt;br /&gt;wt: 5.345&#34;,&#34;mpg: 32.4&lt;br /&gt;wt: 2.200&#34;,&#34;mpg: 30.4&lt;br /&gt;wt: 1.615&#34;,&#34;mpg: 33.9&lt;br /&gt;wt: 1.835&#34;,&#34;mpg: 21.5&lt;br /&gt;wt: 2.465&#34;,&#34;mpg: 15.5&lt;br /&gt;wt: 3.520&#34;,&#34;mpg: 15.2&lt;br /&gt;wt: 3.435&#34;,&#34;mpg: 13.3&lt;br /&gt;wt: 3.840&#34;,&#34;mpg: 19.2&lt;br /&gt;wt: 3.845&#34;,&#34;mpg: 27.3&lt;br /&gt;wt: 1.935&#34;,&#34;mpg: 26.0&lt;br /&gt;wt: 2.140&#34;,&#34;mpg: 30.4&lt;br /&gt;wt: 1.513&#34;,&#34;mpg: 15.8&lt;br /&gt;wt: 3.170&#34;,&#34;mpg: 19.7&lt;br /&gt;wt: 2.770&#34;,&#34;mpg: 15.0&lt;br /&gt;wt: 3.570&#34;,&#34;mpg: 21.4&lt;br /&gt;wt: 2.780&#34;],&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;markers&#34;,&#34;marker&#34;:{&#34;autocolorscale&#34;:false,&#34;color&#34;:&#34;rgba(255,0,0,1)&#34;,&#34;opacity&#34;:1,&#34;size&#34;:11.3385826771654,&#34;symbol&#34;:&#34;circle&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(255,0,0,1)&#34;}},&#34;hoveron&#34;:&#34;points&#34;,&#34;showlegend&#34;:false,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null}],&#34;layout&#34;:{&#34;margin&#34;:{&#34;t&#34;:26.2283105022831,&#34;r&#34;:7.30593607305936,&#34;b&#34;:40.1826484018265,&#34;l&#34;:31.4155251141553},&#34;plot_bgcolor&#34;:&#34;rgba(255,255,255,1)&#34;,&#34;paper_bgcolor&#34;:&#34;rgba(255,255,255,1)&#34;,&#34;font&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:14.6118721461187},&#34;xaxis&#34;:{&#34;domain&#34;:[0,1],&#34;automargin&#34;:true,&#34;type&#34;:&#34;linear&#34;,&#34;autorange&#34;:false,&#34;range&#34;:[9.225,35.075],&#34;tickmode&#34;:&#34;array&#34;,&#34;ticktext&#34;:[&#34;10&#34;,&#34;15&#34;,&#34;20&#34;,&#34;25&#34;,&#34;30&#34;,&#34;35&#34;],&#34;tickvals&#34;:[10,15,20,25,30,35],&#34;categoryorder&#34;:&#34;array&#34;,&#34;categoryarray&#34;:[&#34;10&#34;,&#34;15&#34;,&#34;20&#34;,&#34;25&#34;,&#34;30&#34;,&#34;35&#34;],&#34;nticks&#34;:null,&#34;ticks&#34;:&#34;outside&#34;,&#34;tickcolor&#34;:&#34;rgba(51,51,51,1)&#34;,&#34;ticklen&#34;:3.65296803652968,&#34;tickwidth&#34;:0.66417600664176,&#34;showticklabels&#34;:true,&#34;tickfont&#34;:{&#34;color&#34;:&#34;rgba(77,77,77,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:11.689497716895},&#34;tickangle&#34;:-0,&#34;showline&#34;:false,&#34;linecolor&#34;:null,&#34;linewidth&#34;:0,&#34;showgrid&#34;:true,&#34;gridcolor&#34;:&#34;rgba(235,235,235,1)&#34;,&#34;gridwidth&#34;:0.66417600664176,&#34;zeroline&#34;:false,&#34;anchor&#34;:&#34;y&#34;,&#34;title&#34;:{&#34;text&#34;:&#34;mpg&#34;,&#34;font&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:14.6118721461187}},&#34;hoverformat&#34;:&#34;.2f&#34;},&#34;yaxis&#34;:{&#34;domain&#34;:[0,1],&#34;automargin&#34;:true,&#34;type&#34;:&#34;linear&#34;,&#34;autorange&#34;:false,&#34;range&#34;:[1.31745,5.61955],&#34;tickmode&#34;:&#34;array&#34;,&#34;ticktext&#34;:[&#34;2&#34;,&#34;3&#34;,&#34;4&#34;,&#34;5&#34;],&#34;tickvals&#34;:[2,3,4,5],&#34;categoryorder&#34;:&#34;array&#34;,&#34;categoryarray&#34;:[&#34;2&#34;,&#34;3&#34;,&#34;4&#34;,&#34;5&#34;],&#34;nticks&#34;:null,&#34;ticks&#34;:&#34;outside&#34;,&#34;tickcolor&#34;:&#34;rgba(51,51,51,1)&#34;,&#34;ticklen&#34;:3.65296803652968,&#34;tickwidth&#34;:0.66417600664176,&#34;showticklabels&#34;:true,&#34;tickfont&#34;:{&#34;color&#34;:&#34;rgba(77,77,77,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:11.689497716895},&#34;tickangle&#34;:-0,&#34;showline&#34;:false,&#34;linecolor&#34;:null,&#34;linewidth&#34;:0,&#34;showgrid&#34;:true,&#34;gridcolor&#34;:&#34;rgba(235,235,235,1)&#34;,&#34;gridwidth&#34;:0.66417600664176,&#34;zeroline&#34;:false,&#34;anchor&#34;:&#34;x&#34;,&#34;title&#34;:{&#34;text&#34;:&#34;wt&#34;,&#34;font&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:14.6118721461187}},&#34;hoverformat&#34;:&#34;.2f&#34;},&#34;shapes&#34;:[{&#34;type&#34;:&#34;rect&#34;,&#34;fillcolor&#34;:&#34;transparent&#34;,&#34;line&#34;:{&#34;color&#34;:&#34;rgba(51,51,51,1)&#34;,&#34;width&#34;:0.66417600664176,&#34;linetype&#34;:&#34;solid&#34;},&#34;yref&#34;:&#34;paper&#34;,&#34;xref&#34;:&#34;paper&#34;,&#34;x0&#34;:0,&#34;x1&#34;:1,&#34;y0&#34;:0,&#34;y1&#34;:1}],&#34;showlegend&#34;:false,&#34;legend&#34;:{&#34;bgcolor&#34;:&#34;rgba(255,255,255,1)&#34;,&#34;bordercolor&#34;:&#34;transparent&#34;,&#34;borderwidth&#34;:1.88976377952756,&#34;font&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:11.689497716895}},&#34;hovermode&#34;:&#34;closest&#34;,&#34;barmode&#34;:&#34;relative&#34;},&#34;config&#34;:{&#34;doubleClick&#34;:&#34;reset&#34;,&#34;showSendToCloud&#34;:false},&#34;source&#34;:&#34;A&#34;,&#34;attrs&#34;:{&#34;1f4892520bd&#34;:{&#34;x&#34;:{},&#34;y&#34;:{},&#34;type&#34;:&#34;scatter&#34;}},&#34;cur_data&#34;:&#34;1f4892520bd&#34;,&#34;visdat&#34;:{&#34;1f4892520bd&#34;:[&#34;function (y) &#34;,&#34;x&#34;]},&#34;highlight&#34;:{&#34;on&#34;:&#34;plotly_click&#34;,&#34;persistent&#34;:false,&#34;dynamic&#34;:false,&#34;selectize&#34;:false,&#34;opacityDim&#34;:0.2,&#34;selected&#34;:{&#34;opacity&#34;:1},&#34;debounce&#34;:0},&#34;shinyEvents&#34;:[&#34;plotly_hover&#34;,&#34;plotly_click&#34;,&#34;plotly_selected&#34;,&#34;plotly_relayout&#34;,&#34;plotly_brushed&#34;,&#34;plotly_brushing&#34;,&#34;plotly_clickannotation&#34;,&#34;plotly_doubleclick&#34;,&#34;plotly_deselect&#34;,&#34;plotly_afterplot&#34;],&#34;base_url&#34;:&#34;https://plot.ly&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;Several functionalities appear in the top-right of the plot.&lt;/p&gt;
&lt;div id=&#34;plotting-distributions-with-histograms&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Plotting Distributions with Histograms&lt;/h2&gt;
&lt;p&gt;Histogram are suitable for plotting a continous variable. If you want to make a histogram use &lt;strong&gt;geom_histogram&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = mtcars, mapping = aes(x = mpg)) +
  geom_histogram()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/An_Introduction_to_ggplot2/2019-08-08-an-introduction-to-the-ggplot2-package_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can change the size of the bins using the &lt;em&gt;binwidth&lt;/em&gt; parameter :&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = mtcars, mapping = aes(x = mpg)) +
  geom_histogram(binwidth = 3)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/An_Introduction_to_ggplot2/2019-08-08-an-introduction-to-the-ggplot2-package_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;By default, the data is grouped into 30 bins. To can change the number of bins, we use the parameter &lt;strong&gt;bins&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = mtcars, mapping = aes(x = mpg)) +
  geom_histogram(bins = 6)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/An_Introduction_to_ggplot2/2019-08-08-an-introduction-to-the-ggplot2-package_files/figure-html/unnamed-chunk-12-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;To modify the color of the histogram, just proceed as follows:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = mtcars, mapping = aes(x = mpg)) +
  geom_histogram(fill = &amp;quot;pink&amp;quot;, color = &amp;quot;yellow&amp;quot;) # Mind the difference&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/An_Introduction_to_ggplot2/2019-08-08-an-introduction-to-the-ggplot2-package_files/figure-html/unnamed-chunk-13-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can also use the plotly package to plot an interactive histogram.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;histogram &amp;lt;- ggplot(data = mtcars, mapping = aes(x = mpg)) +
  geom_histogram(fill = &amp;quot;pink&amp;quot;, color = &amp;quot;yellow&amp;quot;) 

ggplotly(histogram)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-2&#34; style=&#34;width:672px;height:480px;&#34; class=&#34;plotly html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-2&#34;&gt;{&#34;x&#34;:{&#34;data&#34;:[{&#34;orientation&#34;:&#34;v&#34;,&#34;width&#34;:[0.810344827586206,0.810344827586206,0.810344827586206,0.810344827586206,0.810344827586206,0.810344827586206,0.810344827586206,0.810344827586206,0.810344827586206,0.810344827586206,0.810344827586206,0.810344827586206,0.810344827586206,0.810344827586206,0.810344827586206,0.810344827586206,0.810344827586206,0.810344827586206,0.810344827586206,0.810344827586206,0.810344827586206,0.810344827586206,0.810344827586206,0.810344827586206,0.810344827586206,0.810344827586206,0.810344827586206,0.810344827586221,0.810344827586206,0.810344827586206],&#34;base&#34;:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],&#34;x&#34;:[10.5344827586207,11.3448275862069,12.1551724137931,12.9655172413793,13.7758620689655,14.5862068965517,15.3965517241379,16.2068965517241,17.0172413793103,17.8275862068965,18.6379310344828,19.448275862069,20.2586206896552,21.0689655172414,21.8793103448276,22.6896551724138,23.5,24.3103448275862,25.1206896551724,25.9310344827586,26.7413793103448,27.551724137931,28.3620689655172,29.1724137931034,29.9827586206897,30.7931034482759,31.6034482758621,32.4137931034483,33.2241379310345,34.0344827586207],&#34;y&#34;:[2,0,0,1,0,2,5,1,1,2,1,3,0,4,1,2,0,1,0,1,0,1,0,0,0,2,0,1,0,1],&#34;text&#34;:[&#34;count: 2&lt;br /&gt;mpg: 10.53448&#34;,&#34;count: 0&lt;br /&gt;mpg: 11.34483&#34;,&#34;count: 0&lt;br /&gt;mpg: 12.15517&#34;,&#34;count: 1&lt;br /&gt;mpg: 12.96552&#34;,&#34;count: 0&lt;br /&gt;mpg: 13.77586&#34;,&#34;count: 2&lt;br /&gt;mpg: 14.58621&#34;,&#34;count: 5&lt;br /&gt;mpg: 15.39655&#34;,&#34;count: 1&lt;br /&gt;mpg: 16.20690&#34;,&#34;count: 1&lt;br /&gt;mpg: 17.01724&#34;,&#34;count: 2&lt;br /&gt;mpg: 17.82759&#34;,&#34;count: 1&lt;br /&gt;mpg: 18.63793&#34;,&#34;count: 3&lt;br /&gt;mpg: 19.44828&#34;,&#34;count: 0&lt;br /&gt;mpg: 20.25862&#34;,&#34;count: 4&lt;br /&gt;mpg: 21.06897&#34;,&#34;count: 1&lt;br /&gt;mpg: 21.87931&#34;,&#34;count: 2&lt;br /&gt;mpg: 22.68966&#34;,&#34;count: 0&lt;br /&gt;mpg: 23.50000&#34;,&#34;count: 1&lt;br /&gt;mpg: 24.31034&#34;,&#34;count: 0&lt;br /&gt;mpg: 25.12069&#34;,&#34;count: 1&lt;br /&gt;mpg: 25.93103&#34;,&#34;count: 0&lt;br /&gt;mpg: 26.74138&#34;,&#34;count: 1&lt;br /&gt;mpg: 27.55172&#34;,&#34;count: 0&lt;br /&gt;mpg: 28.36207&#34;,&#34;count: 0&lt;br /&gt;mpg: 29.17241&#34;,&#34;count: 0&lt;br /&gt;mpg: 29.98276&#34;,&#34;count: 2&lt;br /&gt;mpg: 30.79310&#34;,&#34;count: 0&lt;br /&gt;mpg: 31.60345&#34;,&#34;count: 1&lt;br /&gt;mpg: 32.41379&#34;,&#34;count: 0&lt;br /&gt;mpg: 33.22414&#34;,&#34;count: 1&lt;br /&gt;mpg: 34.03448&#34;],&#34;type&#34;:&#34;bar&#34;,&#34;marker&#34;:{&#34;autocolorscale&#34;:false,&#34;color&#34;:&#34;rgba(255,192,203,1)&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(255,255,0,1)&#34;}},&#34;showlegend&#34;:false,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null}],&#34;layout&#34;:{&#34;margin&#34;:{&#34;t&#34;:26.2283105022831,&#34;r&#34;:7.30593607305936,&#34;b&#34;:40.1826484018265,&#34;l&#34;:31.4155251141553},&#34;plot_bgcolor&#34;:&#34;rgba(235,235,235,1)&#34;,&#34;paper_bgcolor&#34;:&#34;rgba(255,255,255,1)&#34;,&#34;font&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:14.6118721461187},&#34;xaxis&#34;:{&#34;domain&#34;:[0,1],&#34;automargin&#34;:true,&#34;type&#34;:&#34;linear&#34;,&#34;autorange&#34;:false,&#34;range&#34;:[8.91379310344827,35.6551724137931],&#34;tickmode&#34;:&#34;array&#34;,&#34;ticktext&#34;:[&#34;10&#34;,&#34;15&#34;,&#34;20&#34;,&#34;25&#34;,&#34;30&#34;,&#34;35&#34;],&#34;tickvals&#34;:[10,15,20,25,30,35],&#34;categoryorder&#34;:&#34;array&#34;,&#34;categoryarray&#34;:[&#34;10&#34;,&#34;15&#34;,&#34;20&#34;,&#34;25&#34;,&#34;30&#34;,&#34;35&#34;],&#34;nticks&#34;:null,&#34;ticks&#34;:&#34;outside&#34;,&#34;tickcolor&#34;:&#34;rgba(51,51,51,1)&#34;,&#34;ticklen&#34;:3.65296803652968,&#34;tickwidth&#34;:0.66417600664176,&#34;showticklabels&#34;:true,&#34;tickfont&#34;:{&#34;color&#34;:&#34;rgba(77,77,77,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:11.689497716895},&#34;tickangle&#34;:-0,&#34;showline&#34;:false,&#34;linecolor&#34;:null,&#34;linewidth&#34;:0,&#34;showgrid&#34;:true,&#34;gridcolor&#34;:&#34;rgba(255,255,255,1)&#34;,&#34;gridwidth&#34;:0.66417600664176,&#34;zeroline&#34;:false,&#34;anchor&#34;:&#34;y&#34;,&#34;title&#34;:{&#34;text&#34;:&#34;mpg&#34;,&#34;font&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:14.6118721461187}},&#34;hoverformat&#34;:&#34;.2f&#34;},&#34;yaxis&#34;:{&#34;domain&#34;:[0,1],&#34;automargin&#34;:true,&#34;type&#34;:&#34;linear&#34;,&#34;autorange&#34;:false,&#34;range&#34;:[-0.25,5.25],&#34;tickmode&#34;:&#34;array&#34;,&#34;ticktext&#34;:[&#34;0&#34;,&#34;1&#34;,&#34;2&#34;,&#34;3&#34;,&#34;4&#34;,&#34;5&#34;],&#34;tickvals&#34;:[0,1,2,3,4,5],&#34;categoryorder&#34;:&#34;array&#34;,&#34;categoryarray&#34;:[&#34;0&#34;,&#34;1&#34;,&#34;2&#34;,&#34;3&#34;,&#34;4&#34;,&#34;5&#34;],&#34;nticks&#34;:null,&#34;ticks&#34;:&#34;outside&#34;,&#34;tickcolor&#34;:&#34;rgba(51,51,51,1)&#34;,&#34;ticklen&#34;:3.65296803652968,&#34;tickwidth&#34;:0.66417600664176,&#34;showticklabels&#34;:true,&#34;tickfont&#34;:{&#34;color&#34;:&#34;rgba(77,77,77,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:11.689497716895},&#34;tickangle&#34;:-0,&#34;showline&#34;:false,&#34;linecolor&#34;:null,&#34;linewidth&#34;:0,&#34;showgrid&#34;:true,&#34;gridcolor&#34;:&#34;rgba(255,255,255,1)&#34;,&#34;gridwidth&#34;:0.66417600664176,&#34;zeroline&#34;:false,&#34;anchor&#34;:&#34;x&#34;,&#34;title&#34;:{&#34;text&#34;:&#34;count&#34;,&#34;font&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:14.6118721461187}},&#34;hoverformat&#34;:&#34;.2f&#34;},&#34;shapes&#34;:[{&#34;type&#34;:&#34;rect&#34;,&#34;fillcolor&#34;:null,&#34;line&#34;:{&#34;color&#34;:null,&#34;width&#34;:0,&#34;linetype&#34;:[]},&#34;yref&#34;:&#34;paper&#34;,&#34;xref&#34;:&#34;paper&#34;,&#34;x0&#34;:0,&#34;x1&#34;:1,&#34;y0&#34;:0,&#34;y1&#34;:1}],&#34;showlegend&#34;:false,&#34;legend&#34;:{&#34;bgcolor&#34;:&#34;rgba(255,255,255,1)&#34;,&#34;bordercolor&#34;:&#34;transparent&#34;,&#34;borderwidth&#34;:1.88976377952756,&#34;font&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:11.689497716895}},&#34;hovermode&#34;:&#34;closest&#34;,&#34;barmode&#34;:&#34;relative&#34;},&#34;config&#34;:{&#34;doubleClick&#34;:&#34;reset&#34;,&#34;showSendToCloud&#34;:false},&#34;source&#34;:&#34;A&#34;,&#34;attrs&#34;:{&#34;1f48251f6192&#34;:{&#34;x&#34;:{},&#34;type&#34;:&#34;bar&#34;}},&#34;cur_data&#34;:&#34;1f48251f6192&#34;,&#34;visdat&#34;:{&#34;1f48251f6192&#34;:[&#34;function (y) &#34;,&#34;x&#34;]},&#34;highlight&#34;:{&#34;on&#34;:&#34;plotly_click&#34;,&#34;persistent&#34;:false,&#34;dynamic&#34;:false,&#34;selectize&#34;:false,&#34;opacityDim&#34;:0.2,&#34;selected&#34;:{&#34;opacity&#34;:1},&#34;debounce&#34;:0},&#34;shinyEvents&#34;:[&#34;plotly_hover&#34;,&#34;plotly_click&#34;,&#34;plotly_selected&#34;,&#34;plotly_relayout&#34;,&#34;plotly_brushed&#34;,&#34;plotly_brushing&#34;,&#34;plotly_clickannotation&#34;,&#34;plotly_doubleclick&#34;,&#34;plotly_deselect&#34;,&#34;plotly_afterplot&#34;],&#34;base_url&#34;:&#34;https://plot.ly&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;filling-histograms-with-categories&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Filling Histograms with Categories&lt;/h1&gt;
&lt;p&gt;Suppose we are interested in ploting the distribution of the miles per gallon (mpg) variable but this time we want to differentiate between automatic and manuel cars (am : 0 = automatic, 1 = manual). First of all, we must convert the &lt;em&gt;am&lt;/em&gt; column into a factor variable:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mtcars$am &amp;lt;- factor(mtcars$am, labels = c(&amp;quot;Automatic&amp;quot;, &amp;quot;Manual&amp;quot;)) # We provide labels 

ggplot(data = mtcars, mapping = aes(x = mpg, fill = am)) +
  geom_histogram() &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/An_Introduction_to_ggplot2/2019-08-08-an-introduction-to-the-ggplot2-package_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;From the above histogram, we observe that manual vehicules have a higher &lt;em&gt;mpg&lt;/em&gt; performance.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;splitting-plots-with-facets&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Splitting Plots with Facets&lt;/h1&gt;
&lt;p&gt;We show above how to plot a distribution according to a specific category. One may proceed otherwise and generate two distinc plots using &lt;strong&gt;Face_grid()&lt;/strong&gt; :&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = mtcars, mapping = aes(x = mpg)) +
  geom_histogram(fill = &amp;quot;yellow&amp;quot;, color = &amp;quot;pink&amp;quot;) +
  facet_grid(~am) +
  theme_light()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/An_Introduction_to_ggplot2/2019-08-08-an-introduction-to-the-ggplot2-package_files/figure-html/unnamed-chunk-16-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Trade Analysis with R</title>
      <link>/post/trade_analysis/trade-analysis-with-r/</link>
      <pubDate>Mon, 05 Aug 2019 00:00:00 +0000</pubDate>
      <guid>/post/trade_analysis/trade-analysis-with-r/</guid>
      <description>


&lt;p&gt;In order to access trade information, we’ll use the &lt;a href=&#34;https://cran.r-project.org/web/packages/comtradr/comtradr.pdf&#34;&gt;comtradr&lt;/a&gt; package which provides an API access to the &lt;a href=&#34;https://comtrade.un.org/&#34;&gt;UN Comtrade Database&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(comtradr)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Suppose we want to analyze the Algerian exports’ evolution (Montary values of goods and services) in relation to the Ouest-European market which represents an important one.
To that aim, we’ll use the &lt;strong&gt;ct_search&lt;/strong&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;export_DZ &amp;lt;- ct_search(reporters = &amp;quot;Algeria&amp;quot;, 
  partners = c(&amp;quot;France&amp;quot;, &amp;quot;Spain&amp;quot;, &amp;quot;Italy&amp;quot;, &amp;quot;Germany&amp;quot;), 
  trade_direction = &amp;quot;exports&amp;quot;)

#Note that the API limitS our request to 5 partner. For more information on API limits, refer to the the comtradr documentation.  &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let us embellish our database and select the relevant information&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)

export_DZ &amp;lt;- as_tibble(export_DZ)

export_DZ &amp;lt;- export_DZ %&amp;gt;% select(year, partner, trade_value_usd)

head(export_DZ)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 3
##    year partner trade_value_usd
##   &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;             &amp;lt;dbl&amp;gt;
## 1  2017 France       4431261656
## 2  2017 Germany        14045034
## 3  2017 Italy        5629479666
## 4  2017 Spain        4103370763
## 5  2012 France       6124176488
## 6  2012 Germany       238172929&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, let’s plot our data to have a broader overview&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;options(scipen = 999) # avoiding scientific values (e.g. 10e9)

ggplot(export_DZ, aes(x = year, y= ((trade_value_usd)/1000))) +  
  facet_grid( ~ as.factor(partner))+                                     
  geom_line(size = 2, color = &amp;quot;lightgreen&amp;quot;) + 
  ylab(&amp;quot;trade value in 1000$&amp;quot;)+
  xlab(&amp;quot;years&amp;quot;)+
  scale_x_continuous(breaks = c(seq(1992, 2015, by = 2), 2017))+
  theme(axis.text.x = element_text(angle = 90, hjust = 1))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/trade_analysis/2019-08-05-trade-analysis-with-r_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Interesting to see that the export value towards Germany is relatively low. Let us compare the exports to the imports.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;import_DZ &amp;lt;- ct_search(reporters = &amp;quot;Algeria&amp;quot;, 
  partners = c(&amp;quot;France&amp;quot;, &amp;quot;Spain&amp;quot;, &amp;quot;Italy&amp;quot;, &amp;quot;Germany&amp;quot;), 
  trade_direction = &amp;quot;imports&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’ll use the &lt;a href=&#34;https://github.com/thomasp85/patchwork&#34;&gt;patchwork&lt;/a&gt; package to combine the import and the export plots. It’s as easy as drinking from a bottle of water.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(patchwork)

max &amp;lt;- max(import_DZ$trade_value_usd/1000, export_DZ$trade_value_usd/1000)

min &amp;lt;- min(import_DZ$trade_value_usd/1000, export_DZ$trade_value_usd/1000)


p1 &amp;lt;- ggplot(export_DZ, aes(x = year, y= ((trade_value_usd)/1000))) +  
  facet_grid( ~ as.factor(partner))+                                     
  geom_line(color = &amp;quot;#FF5E00&amp;quot;) + 
  ylab(&amp;quot;exports value in 1000$&amp;quot;)+
  xlab(&amp;quot;years&amp;quot;)+
  scale_x_continuous(breaks = c(seq(1992, 2015, by = 4), 2017))+
  theme(axis.text.x = element_text(angle = 90, hjust = 1))


p2 &amp;lt;- ggplot(import_DZ, aes(x = year, y= ((trade_value_usd)/1000))) +  
  facet_grid( ~ as.factor(partner))+                                     
  geom_line(color = &amp;quot;#FF00A2&amp;quot;) + 
  ylab(&amp;quot;imports value in 1000$&amp;quot;)+
  xlab(&amp;quot;years&amp;quot;)+
  scale_x_continuous(breaks = c(seq(1992, 2015, by = 4), 2017))+
  theme(axis.text.x = element_text(angle = 90, hjust = 1))



p1 + p2 + patchwork::plot_layout(ncol = 1) + ylim(min, max)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/trade_analysis/2019-08-05-trade-analysis-with-r_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# ylim(min, max) allows us to have the same dimensiality in our two plots.  &lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
