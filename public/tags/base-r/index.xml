<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>base R | Mohamed El Fodil IHADDADEN</title>
    <link>/tags/base-r/</link>
      <atom:link href="/tags/base-r/index.xml" rel="self" type="application/rss+xml" />
    <description>base R</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Thu, 10 Sep 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/img/logo-via-logohub.png</url>
      <title>base R</title>
      <link>/tags/base-r/</link>
    </image>
    
    <item>
      <title>R Base Gems</title>
      <link>/post/r-base-gems/</link>
      <pubDate>Thu, 10 Sep 2020 00:00:00 +0000</pubDate>
      <guid>/post/r-base-gems/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;style&gt;

@import url(&#39;https://fonts.googleapis.com/css2?family=Lora&amp;display=swap&#39;);


&lt;/style&gt;
&lt;style type=&#34;text/css&#34;&gt;

body{
  background-color:#E7EBEC;
    
  font-family: &#39;Lora&#39;, serif;
}

img{
  border-radius: 8px;
  width=500px;
  height=500px;
}



&lt;/style&gt;
&lt;div id=&#34;agrep&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;code&gt;agrep()&lt;/code&gt;&lt;/h1&gt;
&lt;center&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://images.unsplash.com/photo-1577736164649-18f4ade579d6?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=750&amp;amp;q=80&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;from Unsplash by Wolfgang Hasselmann&lt;/p&gt;
&lt;/div&gt;
&lt;/center&gt;
&lt;p&gt;The &lt;code&gt;countries&lt;/code&gt; vector below lists some African countries. The last three values contain mistakes (&lt;strong&gt;Algerria, Morocoo and algeri&lt;/strong&gt;). In real life, it’s usual to work with imperfect data. The &lt;code&gt;agrep()&lt;/code&gt; function allows us to deal with this specific situation by looking at &lt;strong&gt;approximate&lt;/strong&gt; patterns. Suppose, we want to extract the elements that contains the word &lt;strong&gt;Algeria&lt;/strong&gt; within the &lt;code&gt;countries&lt;/code&gt; vector:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;countries &amp;lt;- c(&amp;quot;Algeria&amp;quot;, &amp;quot;Morocco&amp;quot;, &amp;quot;Tunisia&amp;quot;, &amp;quot;Mali&amp;quot;, &amp;quot;Tchad&amp;quot;, &amp;quot;Kenya&amp;quot;, &amp;quot;Algerria&amp;quot;, &amp;quot;Morocoo&amp;quot;, &amp;quot;algeri&amp;quot;)

indexes &amp;lt;- agrep(pattern = &amp;quot;Algeria&amp;quot;, x = countries, ignore.case = TRUE)

countries[indexes]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Algeria&amp;quot;  &amp;quot;Algerria&amp;quot; &amp;quot;algeri&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;abbreviate&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;code&gt;abbreviate()&lt;/code&gt;&lt;/h1&gt;
&lt;center&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://images.unsplash.com/photo-1551944325-776c9772d382?ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=401&amp;amp;q=80&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;from Unsplash by Kirill Pershin&lt;/p&gt;
&lt;/div&gt;
&lt;/center&gt;
&lt;p&gt;The above problem can also be handled using the &lt;code&gt;abbreviate()&lt;/code&gt; function:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Transform the words to lower cases 

countries_lower &amp;lt;- tolower(countries)

abbreviate(
  
  names.arg = countries_lower, 
  
  minlength = 3, 
  
  strict = TRUE, # We permit duplications
  
  named = FALSE
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;alg&amp;quot; &amp;quot;mrc&amp;quot; &amp;quot;tns&amp;quot; &amp;quot;mal&amp;quot; &amp;quot;tch&amp;quot; &amp;quot;kny&amp;quot; &amp;quot;alg&amp;quot; &amp;quot;mrc&amp;quot; &amp;quot;alg&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;table&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;code&gt;table()&lt;/code&gt;&lt;/h1&gt;
&lt;center&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://images.unsplash.com/photo-1547497348-42767a587639?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=750&amp;amp;q=80&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;from Unsplash by Marcus Spiske&lt;/p&gt;
&lt;/div&gt;
&lt;/center&gt;
&lt;p&gt;&lt;code&gt;table()&lt;/code&gt; is a famous function that displays the counts of appearance of each value within a vector.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;countries &amp;lt;- c(&amp;quot;Algeria&amp;quot;, &amp;quot;Algeria&amp;quot;, &amp;quot;Mali&amp;quot;, &amp;quot;Kenya&amp;quot;, &amp;quot;Mali&amp;quot;, &amp;quot;Mali&amp;quot;, &amp;quot;Senegal&amp;quot;, &amp;quot;Uganda&amp;quot;, &amp;quot;Senegal&amp;quot;, &amp;quot;Morocco&amp;quot;, &amp;quot;Senegal&amp;quot;, &amp;quot;Senegal&amp;quot;, &amp;quot;Senegal&amp;quot;, NA, NA, NA, NA, NA, NA)

table(countries, useNA = &amp;quot;no&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## countries
## Algeria   Kenya    Mali Morocco Senegal  Uganda 
##       2       1       3       1       5       1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can change the &lt;code&gt;useNA&lt;/code&gt; argument to &lt;code&gt;&#34;always&#34;&lt;/code&gt; to get the count of NAs:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;table(countries, useNA = &amp;quot;always&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## countries
## Algeria   Kenya    Mali Morocco Senegal  Uganda    &amp;lt;NA&amp;gt; 
##       2       1       3       1       5       1       6&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you want to sort by count of appearance:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;my_tab &amp;lt;- table(countries, useNA = &amp;quot;no&amp;quot;)

sort(x = my_tab, decreasing = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## countries
## Senegal    Mali Algeria   Kenya Morocco  Uganda 
##       5       3       2       1       1       1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can quickly visualize the distribution of the &lt;code&gt;countries&lt;/code&gt; vector:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sort_tab &amp;lt;- sort(x = my_tab, decreasing = TRUE)

barplot(sort_tab, ylab = &amp;quot;Counts&amp;quot;, col = &amp;quot;steelblue&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-09-10-r-base-gems.en_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;search&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;code&gt;search()&lt;/code&gt;&lt;/h1&gt;
&lt;center&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://images.unsplash.com/photo-1572965933956-65d960e6b11b?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=500&amp;amp;q=80&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;from Unsplash by Ak Ka&lt;/p&gt;
&lt;/div&gt;
&lt;/center&gt;
&lt;p&gt;&lt;code&gt;search()&lt;/code&gt; is a nice little function that tells you which packages are attached to your current session.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;search()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;.GlobalEnv&amp;quot;        &amp;quot;package:stats&amp;quot;     &amp;quot;package:graphics&amp;quot; 
## [4] &amp;quot;package:grDevices&amp;quot; &amp;quot;package:utils&amp;quot;     &amp;quot;package:datasets&amp;quot; 
## [7] &amp;quot;package:methods&amp;quot;   &amp;quot;Autoloads&amp;quot;         &amp;quot;package:base&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;jitter&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;code&gt;jitter()&lt;/code&gt;&lt;/h1&gt;
&lt;center&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://images.unsplash.com/photo-1588416197225-c2554a33c536?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=750&amp;amp;q=80&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;from Unsplash by Dragisa Braunovic&lt;/p&gt;
&lt;/div&gt;
&lt;/center&gt;
&lt;p&gt;&lt;code&gt;jitter()&lt;/code&gt; allows you to introduce some fluctuations to a vector of values&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# run mtcars$mpg to check the difference
jitter(mtcars$mpg)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] 21.00467 21.00279 22.81458 21.40172 18.71187 18.11439 14.29423 24.41826
##  [9] 22.78911 19.21008 17.81626 16.38164 17.29093 15.21337 10.39363 10.40530
## [17] 14.69248 32.38503 30.40037 33.91228 21.50025 15.48994 15.18539 13.31316
## [25] 19.20811 27.29118 26.01934 30.41595 15.81780 19.69516 14.99039 21.41895&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;comment&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;code&gt;comment()&lt;/code&gt;&lt;/h1&gt;
&lt;center&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://images.unsplash.com/photo-1545320059-b95959ddeb55?ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=752&amp;amp;q=80&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;from Unsplash by Wolfgang Hasselmann&lt;/p&gt;
&lt;/div&gt;
&lt;/center&gt;
&lt;p&gt;The &lt;code&gt;comment()&lt;/code&gt; function is particularly useful when you want to bind some comments to a specific object. When the object is printed, the comments won’t be displayed.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;comment(mtcars) &amp;lt;- &amp;quot;This data frame has no NAs, go ahead !&amp;quot;

comment(mtcars)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;This data frame has no NAs, go ahead !&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;attributes()&lt;/code&gt; function will also retrieve the comments&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;attributes(mtcars)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $names
##  [1] &amp;quot;mpg&amp;quot;  &amp;quot;cyl&amp;quot;  &amp;quot;disp&amp;quot; &amp;quot;hp&amp;quot;   &amp;quot;drat&amp;quot; &amp;quot;wt&amp;quot;   &amp;quot;qsec&amp;quot; &amp;quot;vs&amp;quot;   &amp;quot;am&amp;quot;   &amp;quot;gear&amp;quot;
## [11] &amp;quot;carb&amp;quot;
## 
## $row.names
##  [1] &amp;quot;Mazda RX4&amp;quot;           &amp;quot;Mazda RX4 Wag&amp;quot;       &amp;quot;Datsun 710&amp;quot;         
##  [4] &amp;quot;Hornet 4 Drive&amp;quot;      &amp;quot;Hornet Sportabout&amp;quot;   &amp;quot;Valiant&amp;quot;            
##  [7] &amp;quot;Duster 360&amp;quot;          &amp;quot;Merc 240D&amp;quot;           &amp;quot;Merc 230&amp;quot;           
## [10] &amp;quot;Merc 280&amp;quot;            &amp;quot;Merc 280C&amp;quot;           &amp;quot;Merc 450SE&amp;quot;         
## [13] &amp;quot;Merc 450SL&amp;quot;          &amp;quot;Merc 450SLC&amp;quot;         &amp;quot;Cadillac Fleetwood&amp;quot; 
## [16] &amp;quot;Lincoln Continental&amp;quot; &amp;quot;Chrysler Imperial&amp;quot;   &amp;quot;Fiat 128&amp;quot;           
## [19] &amp;quot;Honda Civic&amp;quot;         &amp;quot;Toyota Corolla&amp;quot;      &amp;quot;Toyota Corona&amp;quot;      
## [22] &amp;quot;Dodge Challenger&amp;quot;    &amp;quot;AMC Javelin&amp;quot;         &amp;quot;Camaro Z28&amp;quot;         
## [25] &amp;quot;Pontiac Firebird&amp;quot;    &amp;quot;Fiat X1-9&amp;quot;           &amp;quot;Porsche 914-2&amp;quot;      
## [28] &amp;quot;Lotus Europa&amp;quot;        &amp;quot;Ford Pantera L&amp;quot;      &amp;quot;Ferrari Dino&amp;quot;       
## [31] &amp;quot;Maserati Bora&amp;quot;       &amp;quot;Volvo 142E&amp;quot;         
## 
## $class
## [1] &amp;quot;data.frame&amp;quot;
## 
## $comment
## [1] &amp;quot;This data frame has no NAs, go ahead !&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;make.unique&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;code&gt;make.unique()&lt;/code&gt;&lt;/h1&gt;
&lt;center&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://images.unsplash.com/photo-1545481780-acff2f394ef6?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=752&amp;amp;q=80&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;from Unsplash by Wolfgang Hasselmann&lt;/p&gt;
&lt;/div&gt;
&lt;/center&gt;
&lt;p&gt;&lt;code&gt;make.unique()&lt;/code&gt; is a pretty powerful function. It appends a sequence of numbers to duplicates in order to make vector’s elements unique:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;countries &amp;lt;- c(&amp;quot;Algeria&amp;quot;, &amp;quot;Morocco&amp;quot;, &amp;quot;Algeria&amp;quot;, &amp;quot;Algeria&amp;quot;, &amp;quot;Morocco&amp;quot;, &amp;quot;Tunisia&amp;quot;, &amp;quot;Morocco&amp;quot;, &amp;quot;Tunisia&amp;quot;)

make.unique(names = countries, sep = &amp;quot; -_- &amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Algeria&amp;quot;       &amp;quot;Morocco&amp;quot;       &amp;quot;Algeria -_- 1&amp;quot; &amp;quot;Algeria -_- 2&amp;quot;
## [5] &amp;quot;Morocco -_- 1&amp;quot; &amp;quot;Tunisia&amp;quot;       &amp;quot;Morocco -_- 2&amp;quot; &amp;quot;Tunisia -_- 1&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>How to split a dataframe in R?</title>
      <link>/post/how_to_split_a_dataframe/how-to-split-a-dataframe-in-r/</link>
      <pubDate>Mon, 11 Nov 2019 00:00:00 +0000</pubDate>
      <guid>/post/how_to_split_a_dataframe/how-to-split-a-dataframe-in-r/</guid>
      <description>


&lt;p&gt;In this tutorial we’ll work with the &lt;strong&gt;ChickWeight&lt;/strong&gt; data. This database exhibits information on chickens’ weights according to 4 different diets.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(ChickWeight)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   weight Time Chick Diet
## 1     42    0     1    1
## 2     51    2     1    1
## 3     59    4     1    1
## 4     64    6     1    1
## 5     76    8     1    1
## 6     93   10     1    1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Suppose, we want to split our overal dataframe according to each type of diet. There is a simple function called &lt;code&gt;split()&lt;/code&gt; that allows us to do that. &lt;strong&gt;Note that the splitting argument must be a factor object.&lt;/strong&gt; Let’s check this condition.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;class(ChickWeight$Diet)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;factor&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Indeed, the Diet variable is a factor. Now, we split our dataframe :&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;splitted_data &amp;lt;- split(ChickWeight, ChickWeight$Diet)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this context, we can assign a name to each splitted data:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Diet1 &amp;lt;- splitted_data$`1`  # The 1, 2, 3, 4 represent the diet factor levels

Diet2 &amp;lt;- splitted_data$`2`

Diet3 &amp;lt;- splitted_data$`3`

Diet4 &amp;lt;- splitted_data$`4`&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, let’s check our result by printig the first values of Diet 3 and Diet 4:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(Diet3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     weight Time Chick Diet
## 341     42    0    31    3
## 342     53    2    31    3
## 343     62    4    31    3
## 344     73    6    31    3
## 345     85    8    31    3
## 346    102   10    31    3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(Diet4)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     weight Time Chick Diet
## 461     42    0    41    4
## 462     51    2    41    4
## 463     66    4    41    4
## 464     85    6    41    4
## 465    103    8    41    4
## 466    124   10    41    4&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Great, it’s perfectly working.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introduction to the Subset function</title>
      <link>/post/introduction_to_the_subset_function/introduction-to-the-subset-function/</link>
      <pubDate>Mon, 11 Nov 2019 00:00:00 +0000</pubDate>
      <guid>/post/introduction_to_the_subset_function/introduction-to-the-subset-function/</guid>
      <description>


&lt;p&gt;Although I’m a big fan of the tidyverse philosophy of handling and wrangling data, one must admit that there are quit powerful functions in base R. One of theses functions is &lt;code&gt;subset()&lt;/code&gt; which returns a dataframe according to some defined subsetting properties. Let’s dive into one example using the simple &lt;strong&gt;mtcars&lt;/strong&gt; data:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(mtcars)  # A quick look at the mtcars data&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                    mpg cyl disp  hp drat    wt  qsec vs am gear carb
## Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4
## Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4
## Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1
## Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1
## Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2
## Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Suppose, we want to extract all the vehicules that have an &lt;em&gt;mpg&lt;/em&gt; greater than 20:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;subset(mtcars, mpg &amp;gt; 20)  # the first argument is the dataframe&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                 mpg cyl  disp  hp drat    wt  qsec vs am gear carb
## Mazda RX4      21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4
## Mazda RX4 Wag  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4
## Datsun 710     22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1
## Hornet 4 Drive 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1
## Merc 240D      24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2
## Merc 230       22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2
## Fiat 128       32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1
## Honda Civic    30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2
## Toyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1
## Toyota Corona  21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1
## Fiat X1-9      27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1
## Porsche 914-2  26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2
## Lotus Europa   30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2
## Volvo 142E     21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can observe that the &lt;em&gt;subset&lt;/em&gt; function is flexible. We don’t have to specify the column name with the dollar sign (&lt;em&gt;mtcars$mpg&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Let’s take another more complex example. We will extract all vehicules that have an &lt;em&gt;mpg&lt;/em&gt; superior to 30 and a &lt;em&gt;cyl&lt;/em&gt; equal to 4:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;subset(mtcars, mpg &amp;gt; 30 &amp;amp; cyl == 4) # &amp;amp; &amp;lt;=&amp;gt; AND&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                 mpg cyl disp  hp drat    wt  qsec vs am gear carb
## Fiat 128       32.4   4 78.7  66 4.08 2.200 19.47  1  1    4    1
## Honda Civic    30.4   4 75.7  52 4.93 1.615 18.52  1  1    4    2
## Toyota Corolla 33.9   4 71.1  65 4.22 1.835 19.90  1  1    4    1
## Lotus Europa   30.4   4 95.1 113 3.77 1.513 16.90  1  1    5    2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, the &lt;em&gt;subset&lt;/em&gt; function works smoothly with the R logical expressions.&lt;/p&gt;
&lt;p&gt;Finally, there is another important argument that we must see. Suppose, we want to extract a specified column, let’s say that we’re solely interested in the &lt;em&gt;wt&lt;/em&gt; variable. We can extract this column depending using the &lt;code&gt;select&lt;/code&gt; argument:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;subset(mtcars, mpg &amp;gt; 30 &amp;amp; cyl == 4, select = wt)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                   wt
## Fiat 128       2.200
## Honda Civic    1.615
## Toyota Corolla 1.835
## Lotus Europa   1.513&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the same way, we can extract several columns :&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;subset(mtcars, mpg &amp;gt; 30 &amp;amp; cyl == 4, select = c(wt, disp, am))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                   wt disp am
## Fiat 128       2.200 78.7  1
## Honda Civic    1.615 75.7  1
## Toyota Corolla 1.835 71.1  1
## Lotus Europa   1.513 95.1  1&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
