<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>base R | Mohamed El Fodil IHADDADEN</title>
    <link>/tags/base-r/</link>
      <atom:link href="/tags/base-r/index.xml" rel="self" type="application/rss+xml" />
    <description>base R</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Mon, 11 Nov 2019 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/img/logo-via-logohub.png</url>
      <title>base R</title>
      <link>/tags/base-r/</link>
    </image>
    
    <item>
      <title>How to split a dataframe in R?</title>
      <link>/post/how_to_split_a_dataframe/how-to-split-a-dataframe-in-r/</link>
      <pubDate>Mon, 11 Nov 2019 00:00:00 +0000</pubDate>
      <guid>/post/how_to_split_a_dataframe/how-to-split-a-dataframe-in-r/</guid>
      <description>


&lt;p&gt;In this tutorial we’ll work with the &lt;strong&gt;ChickWeight&lt;/strong&gt; data. This database exhibits information on chickens’ weights according to 4 different diets.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(ChickWeight)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   weight Time Chick Diet
## 1     42    0     1    1
## 2     51    2     1    1
## 3     59    4     1    1
## 4     64    6     1    1
## 5     76    8     1    1
## 6     93   10     1    1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Suppose, we want to split our overal dataframe according to each type of diet. There is a simple function called &lt;code&gt;split()&lt;/code&gt; that allows us to do that. &lt;strong&gt;Note that the splitting argument must be a factor object.&lt;/strong&gt; Let’s check this condition.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;class(ChickWeight$Diet)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;factor&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Indeed, the Diet variable is a factor. Now, we split our dataframe :&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;splitted_data &amp;lt;- split(ChickWeight, ChickWeight$Diet)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this context, we can assign a name to each splitted data:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Diet1 &amp;lt;- splitted_data$`1`  # The 1, 2, 3, 4 represent the diet factor levels

Diet2 &amp;lt;- splitted_data$`2`

Diet3 &amp;lt;- splitted_data$`3`

Diet4 &amp;lt;- splitted_data$`4`&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, let’s check our result by printig the first values of Diet 3 and Diet 4:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(Diet3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     weight Time Chick Diet
## 341     42    0    31    3
## 342     53    2    31    3
## 343     62    4    31    3
## 344     73    6    31    3
## 345     85    8    31    3
## 346    102   10    31    3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(Diet4)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     weight Time Chick Diet
## 461     42    0    41    4
## 462     51    2    41    4
## 463     66    4    41    4
## 464     85    6    41    4
## 465    103    8    41    4
## 466    124   10    41    4&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Great, it’s perfectly working.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introduction to the Subset function</title>
      <link>/post/introduction_to_the_subset_function/introduction-to-the-subset-function/</link>
      <pubDate>Mon, 11 Nov 2019 00:00:00 +0000</pubDate>
      <guid>/post/introduction_to_the_subset_function/introduction-to-the-subset-function/</guid>
      <description>


&lt;p&gt;Although I’m a big fan of the tidyverse philosophy of handling and wrangling data, one must admit that there are quit powerful functions in base R. One of theses functions is &lt;code&gt;subset()&lt;/code&gt; which returns a dataframe according to some defined subsetting properties. Let’s dive into one example using the simple &lt;strong&gt;mtcars&lt;/strong&gt; data:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(mtcars)  # A quick look at the mtcars data&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                    mpg cyl disp  hp drat    wt  qsec vs am gear carb
## Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4
## Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4
## Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1
## Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1
## Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2
## Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Suppose, we want to extract all the vehicules that have an &lt;em&gt;mpg&lt;/em&gt; greater than 20:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;subset(mtcars, mpg &amp;gt; 20)  # the first argument is the dataframe&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                 mpg cyl  disp  hp drat    wt  qsec vs am gear carb
## Mazda RX4      21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4
## Mazda RX4 Wag  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4
## Datsun 710     22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1
## Hornet 4 Drive 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1
## Merc 240D      24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2
## Merc 230       22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2
## Fiat 128       32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1
## Honda Civic    30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2
## Toyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1
## Toyota Corona  21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1
## Fiat X1-9      27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1
## Porsche 914-2  26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2
## Lotus Europa   30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2
## Volvo 142E     21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can observe that the &lt;em&gt;subset&lt;/em&gt; function is flexible. We don’t have to specify the column name with the dollar sign (&lt;em&gt;mtcars$mpg&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Let’s take another more complex example. We will extract all vehicules that have an &lt;em&gt;mpg&lt;/em&gt; superior to 30 and a &lt;em&gt;cyl&lt;/em&gt; equal to 4:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;subset(mtcars, mpg &amp;gt; 30 &amp;amp; cyl == 4) # &amp;amp; &amp;lt;=&amp;gt; AND&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                 mpg cyl disp  hp drat    wt  qsec vs am gear carb
## Fiat 128       32.4   4 78.7  66 4.08 2.200 19.47  1  1    4    1
## Honda Civic    30.4   4 75.7  52 4.93 1.615 18.52  1  1    4    2
## Toyota Corolla 33.9   4 71.1  65 4.22 1.835 19.90  1  1    4    1
## Lotus Europa   30.4   4 95.1 113 3.77 1.513 16.90  1  1    5    2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, the &lt;em&gt;subset&lt;/em&gt; function works smoothly with the R logical expressions.&lt;/p&gt;
&lt;p&gt;Finally, there is another important argument that we must see. Suppose, we want to extract a specified column, let’s say that we’re solely interested in the &lt;em&gt;wt&lt;/em&gt; variable. We can extract this column depending using the &lt;code&gt;select&lt;/code&gt; argument:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;subset(mtcars, mpg &amp;gt; 30 &amp;amp; cyl == 4, select = wt)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                   wt
## Fiat 128       2.200
## Honda Civic    1.615
## Toyota Corolla 1.835
## Lotus Europa   1.513&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the same way, we can extract several columns :&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;subset(mtcars, mpg &amp;gt; 30 &amp;amp; cyl == 4, select = c(wt, disp, am))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                   wt disp am
## Fiat 128       2.200 78.7  1
## Honda Civic    1.615 75.7  1
## Toyota Corolla 1.835 71.1  1
## Lotus Europa   1.513 95.1  1&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
